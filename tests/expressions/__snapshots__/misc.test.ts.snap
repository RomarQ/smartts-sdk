// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Misc expressions CallLambda 1`] = `
"
        (
            template_id (static_id 0 (\\"misc.test.ts\\" 9))
            storage (lambda 1 None False \\"lambda_arg\\" (\\"misc.test.ts\\" 11) ((result (lambdaParams 1 \\"lambda_arg\\" (\\"misc.test.ts\\" 11) \\"bool\\") (\\"misc.test.ts\\" 13))))
            storage_type (())
            messages ((ep1 True False False True (\\"misc.test.ts\\" 16) ((set_type (params (\\"misc.test.ts\\" 16)) \\"bool\\" (\\"misc.test.ts\\" 21)) (verify (call_lambda (data) (params (\\"misc.test.ts\\" 16)) (\\"misc.test.ts\\" 18)) (unit) (\\"misc.test.ts\\" 18)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"misc.test.ts\\" 9))
        )
        "
`;

exports[`Misc expressions CallLambda 2`] = `
"{
    \\"micheline\\": \\"parameter (bool %ep1);\\\\nstorage   (lambda bool bool);\\\\ncode\\\\n  {\\\\n    UNPAIR;     # @parameter : @storage\\\\n    SWAP;       # @storage : @parameter\\\\n    # == ep1 ==\\\\n    # sp.verify(self.data(params), sp.unit) # @storage : @parameter\\\\n    DUP;        # @storage : @storage : @parameter\\\\n    DUG 2;      # @storage : @parameter : @storage\\\\n    SWAP;       # @parameter : @storage : @storage\\\\n    EXEC;       # bool : @storage\\\\n    IF\\\\n      {}\\\\n      {\\\\n        UNIT;       # unit : @storage\\\\n        FAILWITH;   # FAILED\\\\n      }; # @storage\\\\n    NIL operation; # list operation : @storage\\\\n    PAIR;       # pair (list operation) @storage\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"lambda\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"bool\\"
                        },
                        {
                            \\"prim\\": \\"bool\\"
                        }
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"bool\\",
                    \\"annots\\": [
                        \\"%ep1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"UNPAIR\\"
                    },
                    {
                        \\"prim\\": \\"SWAP\\"
                    },
                    {
                        \\"prim\\": \\"DUP\\"
                    },
                    {
                        \\"prim\\": \\"DUG\\",
                        \\"args\\": [
                            {
                                \\"int\\": \\"2\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"SWAP\\"
                    },
                    {
                        \\"prim\\": \\"EXEC\\"
                    },
                    {
                        \\"prim\\": \\"IF\\",
                        \\"args\\": [
                            [],
                            [
                                {
                                    \\"prim\\": \\"UNIT\\"
                                },
                                {
                                    \\"prim\\": \\"FAILWITH\\"
                                }
                            ]
                        ]
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ]
}"
`;

exports[`Misc expressions CallView 1`] = `
"
        (
            template_id (static_id 0 (\\"misc.test.ts\\" 24))
            storage (variant \\"None\\" (unit) (\\"misc.test.ts\\" 25))
            storage_type (())
            messages ((ep1 True False False True (\\"misc.test.ts\\" 28) ((set_type (params (\\"misc.test.ts\\" 28)) \\"bool\\" (\\"misc.test.ts\\" 35)) (set (data) (view \\"some_view\\" (self_address) (params (\\"misc.test.ts\\" 28)) \\"bool\\" (\\"misc.test.ts\\" 30)) (\\"misc.test.ts\\" 30)))))
            flags ()
            privates ()
            views ((onchain some_view True (\\"misc.test.ts\\" 26) False \\"\\" ((set_type (params (\\"misc.test.ts\\" 26)) \\"bool\\" (\\"misc.test.ts\\" 35)) (result (not (params (\\"misc.test.ts\\" 26)) (\\"misc.test.ts\\" 26)) (\\"misc.test.ts\\" 26)))))
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"misc.test.ts\\" 24))
        )
        "
`;

exports[`Misc expressions CallView 2`] = `
"{
    \\"micheline\\": \\"parameter (bool %ep1);\\\\nstorage   (option bool);\\\\ncode\\\\n  {\\\\n    CAR;        # @parameter\\\\n    # == ep1 ==\\\\n    # self.data = sp.view(\\\\\\"some_view\\\\\\", sp.self_address, params, sp.TBool) # @parameter\\\\n    SELF_ADDRESS; # @self : @parameter\\\\n    SWAP;       # @parameter : @self\\\\n    VIEW \\\\\\"some_view\\\\\\" bool; # option bool\\\\n    NIL operation; # list operation : option bool\\\\n    PAIR;       # pair (list operation) (option bool)\\\\n  };\\\\nview\\\\n  \\\\\\"some_view\\\\\\" bool bool\\\\n  {\\\\n    CAR;        # @parameter\\\\n    # sp.result(~ params) # @parameter\\\\n    NOT;        # bool\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"option\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"bool\\"
                        }
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"bool\\",
                    \\"annots\\": [
                        \\"%ep1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"SELF_ADDRESS\\"
                    },
                    {
                        \\"prim\\": \\"SWAP\\"
                    },
                    {
                        \\"prim\\": \\"VIEW\\",
                        \\"args\\": [
                            {
                                \\"string\\": \\"some_view\\"
                            },
                            {
                                \\"prim\\": \\"bool\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        },
        {
            \\"prim\\": \\"view\\",
            \\"args\\": [
                {
                    \\"string\\": \\"some_view\\"
                },
                {
                    \\"prim\\": \\"bool\\"
                },
                {
                    \\"prim\\": \\"bool\\"
                },
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"NOT\\"
                    }
                ]
            ]
        }
    ]
}"
`;
