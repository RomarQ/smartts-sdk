// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Integer expressions And 1`] = `
"
        (
            template_id (static_id 0 (\\"logic.test.ts\\" 20))
            storage ()
            storage_type (\\"bool\\")
            messages ((ep1 True False False True (\\"logic.test.ts\\" 23) ((set_type (params (\\"logic.test.ts\\" 23)) \\"unit\\" (\\"logic.test.ts\\" 28)) (set (data) (and (eq (and (literal (nat 1) (\\"logic.test.ts\\" 23)) (literal (nat 0) (\\"logic.test.ts\\" 23)) (\\"logic.test.ts\\" 23)) (literal (nat 1) (\\"logic.test.ts\\" 23)) (\\"logic.test.ts\\" 23)) (literal (bool False) (\\"logic.test.ts\\" 23)) (\\"logic.test.ts\\" 23)) (\\"logic.test.ts\\" 23)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"logic.test.ts\\" 20))
        )
        "
`;

exports[`Integer expressions And 2`] = `
"{
    \\"micheline\\": \\"parameter (unit %ep1);\\\\nstorage   bool;\\\\ncode\\\\n  {\\\\n    DROP;       # \\\\n    # == ep1 ==\\\\n    # self.data = ((1 & 0) == 1) & False # \\\\n    PUSH bool False; # bool\\\\n    NIL operation; # list operation : bool\\\\n    PAIR;       # pair (list operation) bool\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"bool\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"unit\\",
                    \\"annots\\": [
                        \\"%ep1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"DROP\\"
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"bool\\"
                            },
                            {
                                \\"prim\\": \\"False\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TBool)\\\\n\\\\n  @sp.entry_point\\\\n  def ep1(self, params):\\\\n    sp.set_type(params, sp.TUnit)\\\\n    self.data = ((1 & 0) == 1) & False\\\\n\\\\nsp.add_compilation_target(\\\\\\"test\\\\\\", Contract())\\"
}"
`;

exports[`Integer expressions Or 1`] = `
"
        (
            template_id (static_id 0 (\\"logic.test.ts\\" 9))
            storage ()
            storage_type (\\"bool\\")
            messages ((ep1 True False False True (\\"logic.test.ts\\" 12) ((set_type (params (\\"logic.test.ts\\" 12)) \\"unit\\" (\\"logic.test.ts\\" 17)) (set (data) (or (eq (or (literal (nat 1) (\\"logic.test.ts\\" 12)) (literal (nat 0) (\\"logic.test.ts\\" 12)) (\\"logic.test.ts\\" 12)) (literal (nat 1) (\\"logic.test.ts\\" 12)) (\\"logic.test.ts\\" 12)) (literal (bool False) (\\"logic.test.ts\\" 12)) (\\"logic.test.ts\\" 12)) (\\"logic.test.ts\\" 12)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"logic.test.ts\\" 9))
        )
        "
`;

exports[`Integer expressions Or 2`] = `
"{
    \\"micheline\\": \\"parameter (unit %ep1);\\\\nstorage   bool;\\\\ncode\\\\n  {\\\\n    DROP;       # \\\\n    # == ep1 ==\\\\n    # self.data = ((1 | 0) == 1) | False # \\\\n    PUSH nat 1; # nat\\\\n    PUSH nat 0; # nat : nat\\\\n    PUSH nat 1; # nat : nat : nat\\\\n    OR;         # nat : nat\\\\n    COMPARE;    # int\\\\n    EQ;         # bool\\\\n    NIL operation; # list operation : bool\\\\n    PAIR;       # pair (list operation) bool\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"bool\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"unit\\",
                    \\"annots\\": [
                        \\"%ep1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"DROP\\"
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"nat\\"
                            },
                            {
                                \\"int\\": \\"1\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"nat\\"
                            },
                            {
                                \\"int\\": \\"0\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"nat\\"
                            },
                            {
                                \\"int\\": \\"1\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"OR\\"
                    },
                    {
                        \\"prim\\": \\"COMPARE\\"
                    },
                    {
                        \\"prim\\": \\"EQ\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TBool)\\\\n\\\\n  @sp.entry_point\\\\n  def ep1(self, params):\\\\n    sp.set_type(params, sp.TUnit)\\\\n    self.data = ((1 | 0) == 1) | False\\\\n\\\\nsp.add_compilation_target(\\\\\\"test\\\\\\", Contract())\\"
}"
`;

exports[`Integer expressions Xor 1`] = `
"
        (
            template_id (static_id 0 (\\"logic.test.ts\\" 31))
            storage ()
            storage_type (\\"bool\\")
            messages ((ep1 True False False True (\\"logic.test.ts\\" 34) ((set_type (params (\\"logic.test.ts\\" 34)) \\"unit\\" (\\"logic.test.ts\\" 39)) (set (data) (xor (eq (xor (literal (nat 1) (\\"logic.test.ts\\" 34)) (literal (nat 0) (\\"logic.test.ts\\" 34)) (\\"logic.test.ts\\" 34)) (literal (nat 1) (\\"logic.test.ts\\" 34)) (\\"logic.test.ts\\" 34)) (literal (bool False) (\\"logic.test.ts\\" 34)) (\\"logic.test.ts\\" 34)) (\\"logic.test.ts\\" 34)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"logic.test.ts\\" 31))
        )
        "
`;

exports[`Integer expressions Xor 2`] = `
"{
    \\"micheline\\": \\"parameter (unit %ep1);\\\\nstorage   bool;\\\\ncode\\\\n  {\\\\n    DROP;       # \\\\n    # == ep1 ==\\\\n    # self.data = ((1 ^ 0) == 1) ^ False # \\\\n    PUSH bool False; # bool\\\\n    PUSH nat 1; # nat : bool\\\\n    PUSH nat 0; # nat : nat : bool\\\\n    PUSH nat 1; # nat : nat : nat : bool\\\\n    XOR;        # nat : nat : bool\\\\n    COMPARE;    # int : bool\\\\n    EQ;         # bool : bool\\\\n    XOR;        # bool\\\\n    NIL operation; # list operation : bool\\\\n    PAIR;       # pair (list operation) bool\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"bool\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"unit\\",
                    \\"annots\\": [
                        \\"%ep1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"DROP\\"
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"bool\\"
                            },
                            {
                                \\"prim\\": \\"False\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"nat\\"
                            },
                            {
                                \\"int\\": \\"1\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"nat\\"
                            },
                            {
                                \\"int\\": \\"0\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"nat\\"
                            },
                            {
                                \\"int\\": \\"1\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"XOR\\"
                    },
                    {
                        \\"prim\\": \\"COMPARE\\"
                    },
                    {
                        \\"prim\\": \\"EQ\\"
                    },
                    {
                        \\"prim\\": \\"XOR\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TBool)\\\\n\\\\n  @sp.entry_point\\\\n  def ep1(self, params):\\\\n    sp.set_type(params, sp.TUnit)\\\\n    self.data = ((1 ^ 0) == 1) ^ False\\\\n\\\\nsp.add_compilation_target(\\\\\\"test\\\\\\", Contract())\\"
}"
`;
