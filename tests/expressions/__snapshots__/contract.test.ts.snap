// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Contract expressions GetContract 1`] = `
"
        (
            template_id (static_id 0 (\\"contract.test.ts\\" 35))
            storage ()
            storage_type ((unknown 0))
            messages ((entry_point_1 True False False True (\\"contract.test.ts\\" 36) ((set_type (params (\\"contract.test.ts\\" 36)) \\"unit\\" (\\"contract.test.ts\\" 45)) (defineLocal \\"contract\\" (openVariant (contract entry_point_1 \\"unit\\" (literal (address KT1R9M3MDffw7qSVSnbJs46aMC9YzzZz3aGT) (\\"contract.test.ts\\" 36)) (\\"contract.test.ts\\" 36)) \\"Some\\" None (\\"contract.test.ts\\" 36)) True (\\"contract.test.ts\\" 36)) (set (operations (\\"contract.test.ts\\" 36)) (cons (transfer (unit) (literal (mutez 100) (\\"contract.test.ts\\" 36)) (getLocal \\"contract\\" (\\"contract.test.ts\\" 36)) (\\"contract.test.ts\\" 36)) (operations (\\"contract.test.ts\\" 36)) (\\"contract.test.ts\\" 36)) (\\"contract.test.ts\\" 36)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"contract.test.ts\\" 35))
        )
        "
`;

exports[`Contract expressions GetContract 2`] = `
"{
    \\"micheline\\": \\"parameter (unit %entry_point_1);\\\\nstorage   unit;\\\\ncode\\\\n  {\\\\n    CDR;        # @storage\\\\n    # == entry_point_1 ==\\\\n    # contract = sp.local(\\\\\\"contract\\\\\\", sp.contract(sp.TUnit, sp.address('KT1R9M3MDffw7qSVSnbJs46aMC9YzzZz3aGT'), entry_point='entry_point_1').open_some()) # @storage\\\\n    PUSH address \\\\\\"KT1R9M3MDffw7qSVSnbJs46aMC9YzzZz3aGT\\\\\\"; # address : @storage\\\\n    CONTRACT %entry_point_1 unit; # option (contract unit) : @storage\\\\n    IF_NONE\\\\n      {\\\\n        PUSH int 36; # int : @storage\\\\n        FAILWITH;   # FAILED\\\\n      }\\\\n      {}; # @some : @storage\\\\n    # sp.transfer(sp.unit, sp.mutez(100), contract.value) # @some : @storage\\\\n    NIL operation; # list operation : @some : @storage\\\\n    SWAP;       # @some : list operation : @storage\\\\n    PUSH mutez 100; # mutez : @some : list operation : @storage\\\\n    UNIT;       # unit : mutez : @some : list operation : @storage\\\\n    TRANSFER_TOKENS; # operation : list operation : @storage\\\\n    CONS;       # list operation : @storage\\\\n    PAIR;       # pair (list operation) @storage\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"unit\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"unit\\",
                    \\"annots\\": [
                        \\"%entry_point_1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CDR\\"
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"address\\"
                            },
                            {
                                \\"string\\": \\"KT1R9M3MDffw7qSVSnbJs46aMC9YzzZz3aGT\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"CONTRACT\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"unit\\"
                            }
                        ],
                        \\"annots\\": [
                            \\"%entry_point_1\\"
                        ]
                    },
                    {
                        \\"prim\\": \\"IF_NONE\\",
                        \\"args\\": [
                            [
                                {
                                    \\"prim\\": \\"PUSH\\",
                                    \\"args\\": [
                                        {
                                            \\"prim\\": \\"int\\"
                                        },
                                        {
                                            \\"int\\": \\"36\\"
                                        }
                                    ]
                                },
                                {
                                    \\"prim\\": \\"FAILWITH\\"
                                }
                            ],
                            []
                        ]
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"SWAP\\"
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"mutez\\"
                            },
                            {
                                \\"int\\": \\"100\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"UNIT\\"
                    },
                    {
                        \\"prim\\": \\"TRANSFER_TOKENS\\"
                    },
                    {
                        \\"prim\\": \\"CONS\\"
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TUnit)\\\\n    self.init()\\\\n\\\\n  @sp.entry_point\\\\n  def entry_point_1(self, params):\\\\n    sp.set_type(params, sp.TUnit)\\\\n    contract = sp.local(\\\\\\"contract\\\\\\", sp.contract(sp.TUnit, sp.address('KT1R9M3MDffw7qSVSnbJs46aMC9YzzZz3aGT'), entry_point='entry_point_1').open_some())\\\\n    sp.transfer(sp.unit, sp.mutez(100), contract.value)\\\\n\\\\nsp.add_compilation_target(\\\\\\"test\\\\\\", Contract())\\"
}"
`;

exports[`Contract expressions ImplicitAccount 1`] = `
"
        (
            template_id (static_id 0 (\\"contract.test.ts\\" 59))
            storage ()
            storage_type (\\"unit\\")
            messages ((entry_point_1 True False False True (\\"contract.test.ts\\" 62) ((set_type (params (\\"contract.test.ts\\" 62)) \\"key_hash\\" (\\"contract.test.ts\\" 67)) (set (operations (\\"contract.test.ts\\" 64)) (cons (transfer (unit) (literal (mutez 0) (\\"contract.test.ts\\" 64)) (implicit_account (params (\\"contract.test.ts\\" 62)) (\\"contract.test.ts\\" 64)) (\\"contract.test.ts\\" 64)) (operations (\\"contract.test.ts\\" 64)) (\\"contract.test.ts\\" 64)) (\\"contract.test.ts\\" 64)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"contract.test.ts\\" 59))
        )
        "
`;

exports[`Contract expressions ImplicitAccount 2`] = `
"{
    \\"micheline\\": \\"parameter (key_hash %entry_point_1);\\\\nstorage   unit;\\\\ncode\\\\n  {\\\\n    UNPAIR;     # @parameter : @storage\\\\n    # == entry_point_1 ==\\\\n    # sp.transfer(sp.unit, sp.tez(0), sp.implicit_account(params)) # @parameter : @storage\\\\n    IMPLICIT_ACCOUNT; # contract unit : @storage\\\\n    NIL operation; # list operation : contract unit : @storage\\\\n    SWAP;       # contract unit : list operation : @storage\\\\n    PUSH mutez 0; # mutez : contract unit : list operation : @storage\\\\n    UNIT;       # unit : mutez : contract unit : list operation : @storage\\\\n    TRANSFER_TOKENS; # operation : list operation : @storage\\\\n    CONS;       # list operation : @storage\\\\n    PAIR;       # pair (list operation) @storage\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"unit\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"key_hash\\",
                    \\"annots\\": [
                        \\"%entry_point_1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"UNPAIR\\"
                    },
                    {
                        \\"prim\\": \\"IMPLICIT_ACCOUNT\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"SWAP\\"
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"mutez\\"
                            },
                            {
                                \\"int\\": \\"0\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"UNIT\\"
                    },
                    {
                        \\"prim\\": \\"TRANSFER_TOKENS\\"
                    },
                    {
                        \\"prim\\": \\"CONS\\"
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TUnit)\\\\n    self.init()\\\\n\\\\n  @sp.entry_point\\\\n  def entry_point_1(self, params):\\\\n    sp.set_type(params, sp.TKeyHash)\\\\n    sp.transfer(sp.unit, sp.tez(0), sp.implicit_account(params))\\\\n\\\\nsp.add_compilation_target(\\\\\\"test\\\\\\", Contract())\\"
}"
`;

exports[`Contract expressions ToAddress 1`] = `
"
        (
            template_id (static_id 0 (\\"contract.test.ts\\" 48))
            storage ()
            storage_type (\\"address\\")
            messages ((entry_point_1 True False False True (\\"contract.test.ts\\" 51) ((set_type (params (\\"contract.test.ts\\" 51)) \\"unit\\" (\\"contract.test.ts\\" 56)) (set (data) (to_address (self \\"entry_point_1\\" (\\"contract.test.ts\\" 51)) (\\"contract.test.ts\\" 51)) (\\"contract.test.ts\\" 51)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"contract.test.ts\\" 48))
        )
        "
`;

exports[`Contract expressions ToAddress 2`] = `
"{
    \\"micheline\\": \\"parameter (unit %entry_point_1);\\\\nstorage   address;\\\\ncode\\\\n  {\\\\n    DROP;       # \\\\n    # == entry_point_1 ==\\\\n    # self.data = sp.self_entry_point_address('entry_point_1') # \\\\n    SELF %entry_point_1; # @self\\\\n    ADDRESS;    # address\\\\n    NIL operation; # list operation : address\\\\n    PAIR;       # pair (list operation) address\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"address\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"unit\\",
                    \\"annots\\": [
                        \\"%entry_point_1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"DROP\\"
                    },
                    {
                        \\"prim\\": \\"SELF\\",
                        \\"annots\\": [
                            \\"%entry_point_1\\"
                        ]
                    },
                    {
                        \\"prim\\": \\"ADDRESS\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TAddress)\\\\n\\\\n  @sp.entry_point\\\\n  def entry_point_1(self, params):\\\\n    sp.set_type(params, sp.TUnit)\\\\n    self.data = sp.self_entry_point_address('entry_point_1')\\\\n\\\\nsp.add_compilation_target(\\\\\\"test\\\\\\", Contract())\\"
}"
`;

exports[`Contract expressions ToContract 1`] = `
"
        (
            template_id (static_id 0 (\\"contract.test.ts\\" 22))
            storage ()
            storage_type ((unknown 0))
            messages ((entry_point_1 True False False True (\\"contract.test.ts\\" 23) ((set_type (params (\\"contract.test.ts\\" 23)) \\"unit\\" (\\"contract.test.ts\\" 32)) (set (operations (\\"contract.test.ts\\" 23)) (cons (transfer (unit) (literal (mutez 100) (\\"contract.test.ts\\" 23)) (openVariant (contract entry_point_1 \\"unit\\" (literal (address KT1R9M3MDffw7qSVSnbJs46aMC9YzzZz3aGT) (\\"contract.test.ts\\" 23)) (\\"contract.test.ts\\" 23)) \\"Some\\" (variant \\"Some\\" (literal (string \\"CONTRACT_NOT_FOUND\\") (\\"contract.test.ts\\" 23)) (\\"contract.test.ts\\" 23)) (\\"contract.test.ts\\" 23)) (\\"contract.test.ts\\" 23)) (operations (\\"contract.test.ts\\" 23)) (\\"contract.test.ts\\" 23)) (\\"contract.test.ts\\" 23)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"contract.test.ts\\" 22))
        )
        "
`;

exports[`Contract expressions ToContract 2`] = `
"{
    \\"micheline\\": \\"parameter (unit %entry_point_1);\\\\nstorage   unit;\\\\ncode\\\\n  {\\\\n    CDR;        # @storage\\\\n    # == entry_point_1 ==\\\\n    # sp.transfer(sp.unit, sp.mutez(100), sp.contract(sp.TUnit, sp.address('KT1R9M3MDffw7qSVSnbJs46aMC9YzzZz3aGT'), entry_point='entry_point_1').open_some(message = sp.some('CONTRACT_NOT_FOUND'))) # @storage\\\\n    NIL operation; # list operation : @storage\\\\n    PUSH address \\\\\\"KT1R9M3MDffw7qSVSnbJs46aMC9YzzZz3aGT\\\\\\"; # address : list operation : @storage\\\\n    CONTRACT %entry_point_1 unit; # option (contract unit) : list operation : @storage\\\\n    IF_NONE\\\\n      {\\\\n        PUSH (option string) (Some \\\\\\"CONTRACT_NOT_FOUND\\\\\\"); # option string : list operation : @storage\\\\n        FAILWITH;   # FAILED\\\\n      }\\\\n      {}; # @some : list operation : @storage\\\\n    PUSH mutez 100; # mutez : @some : list operation : @storage\\\\n    UNIT;       # unit : mutez : @some : list operation : @storage\\\\n    TRANSFER_TOKENS; # operation : list operation : @storage\\\\n    CONS;       # list operation : @storage\\\\n    PAIR;       # pair (list operation) @storage\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"unit\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"unit\\",
                    \\"annots\\": [
                        \\"%entry_point_1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CDR\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"address\\"
                            },
                            {
                                \\"string\\": \\"KT1R9M3MDffw7qSVSnbJs46aMC9YzzZz3aGT\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"CONTRACT\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"unit\\"
                            }
                        ],
                        \\"annots\\": [
                            \\"%entry_point_1\\"
                        ]
                    },
                    {
                        \\"prim\\": \\"IF_NONE\\",
                        \\"args\\": [
                            [
                                {
                                    \\"prim\\": \\"PUSH\\",
                                    \\"args\\": [
                                        {
                                            \\"prim\\": \\"option\\",
                                            \\"args\\": [
                                                {
                                                    \\"prim\\": \\"string\\"
                                                }
                                            ]
                                        },
                                        {
                                            \\"prim\\": \\"Some\\",
                                            \\"args\\": [
                                                {
                                                    \\"string\\": \\"CONTRACT_NOT_FOUND\\"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    \\"prim\\": \\"FAILWITH\\"
                                }
                            ],
                            []
                        ]
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"mutez\\"
                            },
                            {
                                \\"int\\": \\"100\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"UNIT\\"
                    },
                    {
                        \\"prim\\": \\"TRANSFER_TOKENS\\"
                    },
                    {
                        \\"prim\\": \\"CONS\\"
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TUnit)\\\\n    self.init()\\\\n\\\\n  @sp.entry_point\\\\n  def entry_point_1(self, params):\\\\n    sp.set_type(params, sp.TUnit)\\\\n    sp.transfer(sp.unit, sp.mutez(100), sp.contract(sp.TUnit, sp.address('KT1R9M3MDffw7qSVSnbJs46aMC9YzzZz3aGT'), entry_point='entry_point_1').open_some(message = sp.some('CONTRACT_NOT_FOUND')))\\\\n\\\\nsp.add_compilation_target(\\\\\\"test\\\\\\", Contract())\\"
}"
`;
