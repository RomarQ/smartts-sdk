// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Crypto expressions Hashing BLACK2B 1`] = `
"
        (
            template_id (static_id 0 (\\"crypto.test.ts\\" 23))
            storage (variant \\"None\\" (unit) (\\"crypto.test.ts\\" 24))
            storage_type ((unknown 0))
            messages ((hash_bytes_BLACK2B True False False True (\\"crypto.test.ts\\" 26) ((set_type (params (\\"crypto.test.ts\\" 26)) \\"bytes\\" (\\"crypto.test.ts\\" 31)) (set (data) (variant \\"Some\\" (blake2b (params (\\"crypto.test.ts\\" 26)) (\\"crypto.test.ts\\" 28)) (\\"crypto.test.ts\\" 28)) (\\"crypto.test.ts\\" 28)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"crypto.test.ts\\" 23))
        )
        "
`;

exports[`Crypto expressions Hashing BLACK2B 2`] = `
"{
    \\"micheline\\": \\"parameter (bytes %hash_bytes_BLACK2B);\\\\nstorage   (option bytes);\\\\ncode\\\\n  {\\\\n    CAR;        # @parameter\\\\n    # == hash_bytes_BLACK2B ==\\\\n    # self.data = sp.some(sp.blake2b(params)) # @parameter\\\\n    BLAKE2B;    # bytes\\\\n    SOME;       # option bytes\\\\n    NIL operation; # list operation : option bytes\\\\n    PAIR;       # pair (list operation) (option bytes)\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"option\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"bytes\\"
                        }
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"bytes\\",
                    \\"annots\\": [
                        \\"%hash_bytes_BLACK2B\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"BLAKE2B\\"
                    },
                    {
                        \\"prim\\": \\"SOME\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TOption(sp.TBytes))\\\\n    self.init(sp.none)\\\\n\\\\n  @sp.entry_point\\\\n  def hash_bytes_BLACK2B(self, params):\\\\n    sp.set_type(params, sp.TBytes)\\\\n    self.data = sp.some(sp.blake2b(params))\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Crypto expressions Hashing HashKey 1`] = `
"
        (
            template_id (static_id 0 (\\"crypto.test.ts\\" 78))
            storage ()
            storage_type (\\"key_hash\\")
            messages ((hash_key True False False True (\\"crypto.test.ts\\" 81) ((set_type (params (\\"crypto.test.ts\\" 81)) \\"key\\" (\\"crypto.test.ts\\" 86)) (set (data) (hash_key (params (\\"crypto.test.ts\\" 81)) (\\"crypto.test.ts\\" 83)) (\\"crypto.test.ts\\" 83)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"crypto.test.ts\\" 78))
        )
        "
`;

exports[`Crypto expressions Hashing HashKey 2`] = `
"{
    \\"micheline\\": \\"parameter (key %hash_key);\\\\nstorage   key_hash;\\\\ncode\\\\n  {\\\\n    CAR;        # @parameter\\\\n    # == hash_key ==\\\\n    # self.data = sp.hash_key(params) # @parameter\\\\n    HASH_KEY;   # key_hash\\\\n    NIL operation; # list operation : key_hash\\\\n    PAIR;       # pair (list operation) key_hash\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"key_hash\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"key\\",
                    \\"annots\\": [
                        \\"%hash_key\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"HASH_KEY\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TKeyHash)\\\\n\\\\n  @sp.entry_point\\\\n  def hash_key(self, params):\\\\n    sp.set_type(params, sp.TKey)\\\\n    self.data = sp.hash_key(params)\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Crypto expressions Hashing KECCAK 1`] = `
"
        (
            template_id (static_id 0 (\\"crypto.test.ts\\" 34))
            storage (variant \\"None\\" (unit) (\\"crypto.test.ts\\" 35))
            storage_type ((unknown 0))
            messages ((hash_bytes_KECCAK True False False True (\\"crypto.test.ts\\" 37) ((set_type (params (\\"crypto.test.ts\\" 37)) \\"bytes\\" (\\"crypto.test.ts\\" 42)) (set (data) (variant \\"Some\\" (keccak (params (\\"crypto.test.ts\\" 37)) (\\"crypto.test.ts\\" 39)) (\\"crypto.test.ts\\" 39)) (\\"crypto.test.ts\\" 39)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"crypto.test.ts\\" 34))
        )
        "
`;

exports[`Crypto expressions Hashing KECCAK 2`] = `
"{
    \\"micheline\\": \\"parameter (bytes %hash_bytes_KECCAK);\\\\nstorage   (option bytes);\\\\ncode\\\\n  {\\\\n    CAR;        # @parameter\\\\n    # == hash_bytes_KECCAK ==\\\\n    # self.data = sp.some(sp.keccak(params)) # @parameter\\\\n    KECCAK;     # bytes\\\\n    SOME;       # option bytes\\\\n    NIL operation; # list operation : option bytes\\\\n    PAIR;       # pair (list operation) (option bytes)\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"option\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"bytes\\"
                        }
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"bytes\\",
                    \\"annots\\": [
                        \\"%hash_bytes_KECCAK\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"KECCAK\\"
                    },
                    {
                        \\"prim\\": \\"SOME\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TOption(sp.TBytes))\\\\n    self.init(sp.none)\\\\n\\\\n  @sp.entry_point\\\\n  def hash_bytes_KECCAK(self, params):\\\\n    sp.set_type(params, sp.TBytes)\\\\n    self.data = sp.some(sp.keccak(params))\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Crypto expressions Hashing SHA3 1`] = `
"
        (
            template_id (static_id 0 (\\"crypto.test.ts\\" 67))
            storage (variant \\"None\\" (unit) (\\"crypto.test.ts\\" 68))
            storage_type ((unknown 0))
            messages ((hash_bytes_SHA3 True False False True (\\"crypto.test.ts\\" 70) ((set_type (params (\\"crypto.test.ts\\" 70)) \\"bytes\\" (\\"crypto.test.ts\\" 75)) (set (data) (variant \\"Some\\" (sha3 (params (\\"crypto.test.ts\\" 70)) (\\"crypto.test.ts\\" 72)) (\\"crypto.test.ts\\" 72)) (\\"crypto.test.ts\\" 72)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"crypto.test.ts\\" 67))
        )
        "
`;

exports[`Crypto expressions Hashing SHA3 2`] = `
"{
    \\"micheline\\": \\"parameter (bytes %hash_bytes_SHA3);\\\\nstorage   (option bytes);\\\\ncode\\\\n  {\\\\n    CAR;        # @parameter\\\\n    # == hash_bytes_SHA3 ==\\\\n    # self.data = sp.some(sp.sha3(params)) # @parameter\\\\n    SHA3;       # bytes\\\\n    SOME;       # option bytes\\\\n    NIL operation; # list operation : option bytes\\\\n    PAIR;       # pair (list operation) (option bytes)\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"option\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"bytes\\"
                        }
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"bytes\\",
                    \\"annots\\": [
                        \\"%hash_bytes_SHA3\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"SHA3\\"
                    },
                    {
                        \\"prim\\": \\"SOME\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TOption(sp.TBytes))\\\\n    self.init(sp.none)\\\\n\\\\n  @sp.entry_point\\\\n  def hash_bytes_SHA3(self, params):\\\\n    sp.set_type(params, sp.TBytes)\\\\n    self.data = sp.some(sp.sha3(params))\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Crypto expressions Hashing SHA256 1`] = `
"
        (
            template_id (static_id 0 (\\"crypto.test.ts\\" 45))
            storage (variant \\"None\\" (unit) (\\"crypto.test.ts\\" 46))
            storage_type ((unknown 0))
            messages ((hash_bytes_SHA256 True False False True (\\"crypto.test.ts\\" 48) ((set_type (params (\\"crypto.test.ts\\" 48)) \\"bytes\\" (\\"crypto.test.ts\\" 53)) (set (data) (variant \\"Some\\" (sha256 (params (\\"crypto.test.ts\\" 48)) (\\"crypto.test.ts\\" 50)) (\\"crypto.test.ts\\" 50)) (\\"crypto.test.ts\\" 50)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"crypto.test.ts\\" 45))
        )
        "
`;

exports[`Crypto expressions Hashing SHA256 2`] = `
"{
    \\"micheline\\": \\"parameter (bytes %hash_bytes_SHA256);\\\\nstorage   (option bytes);\\\\ncode\\\\n  {\\\\n    CAR;        # @parameter\\\\n    # == hash_bytes_SHA256 ==\\\\n    # self.data = sp.some(sp.sha256(params)) # @parameter\\\\n    SHA256;     # bytes\\\\n    SOME;       # option bytes\\\\n    NIL operation; # list operation : option bytes\\\\n    PAIR;       # pair (list operation) (option bytes)\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"option\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"bytes\\"
                        }
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"bytes\\",
                    \\"annots\\": [
                        \\"%hash_bytes_SHA256\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"SHA256\\"
                    },
                    {
                        \\"prim\\": \\"SOME\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TOption(sp.TBytes))\\\\n    self.init(sp.none)\\\\n\\\\n  @sp.entry_point\\\\n  def hash_bytes_SHA256(self, params):\\\\n    sp.set_type(params, sp.TBytes)\\\\n    self.data = sp.some(sp.sha256(params))\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Crypto expressions Hashing SHA512 1`] = `
"
        (
            template_id (static_id 0 (\\"crypto.test.ts\\" 56))
            storage (variant \\"None\\" (unit) (\\"crypto.test.ts\\" 57))
            storage_type ((unknown 0))
            messages ((hash_bytes_SHA512 True False False True (\\"crypto.test.ts\\" 59) ((set_type (params (\\"crypto.test.ts\\" 59)) \\"bytes\\" (\\"crypto.test.ts\\" 64)) (set (data) (variant \\"Some\\" (sha512 (params (\\"crypto.test.ts\\" 59)) (\\"crypto.test.ts\\" 61)) (\\"crypto.test.ts\\" 61)) (\\"crypto.test.ts\\" 61)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"crypto.test.ts\\" 56))
        )
        "
`;

exports[`Crypto expressions Hashing SHA512 2`] = `
"{
    \\"micheline\\": \\"parameter (bytes %hash_bytes_SHA512);\\\\nstorage   (option bytes);\\\\ncode\\\\n  {\\\\n    CAR;        # @parameter\\\\n    # == hash_bytes_SHA512 ==\\\\n    # self.data = sp.some(sp.sha512(params)) # @parameter\\\\n    SHA512;     # bytes\\\\n    SOME;       # option bytes\\\\n    NIL operation; # list operation : option bytes\\\\n    PAIR;       # pair (list operation) (option bytes)\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"option\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"bytes\\"
                        }
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"bytes\\",
                    \\"annots\\": [
                        \\"%hash_bytes_SHA512\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"SHA512\\"
                    },
                    {
                        \\"prim\\": \\"SOME\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TOption(sp.TBytes))\\\\n    self.init(sp.none)\\\\n\\\\n  @sp.entry_point\\\\n  def hash_bytes_SHA512(self, params):\\\\n    sp.set_type(params, sp.TBytes)\\\\n    self.data = sp.some(sp.sha512(params))\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Crypto expressions Signatures CheckSignature 1`] = `
"
        (
            template_id (static_id 0 (\\"crypto.test.ts\\" 91))
            storage ()
            storage_type (\\"bool\\")
            messages ((checkSignature True False False True (\\"crypto.test.ts\\" 94) ((set_type (params (\\"crypto.test.ts\\" 94)) \\"signature\\" (\\"crypto.test.ts\\" 108)) (set (data) (check_signature (literal (key edpku3g7CeTEvSKhxipD4Q2B6EiEP8cR323u8PFmGFgKRVRvCneEmT) (\\"crypto.test.ts\\" 96)) (params (\\"crypto.test.ts\\" 94)) (literal (bytes 0x01) (\\"crypto.test.ts\\" 96)) (\\"crypto.test.ts\\" 96)) (\\"crypto.test.ts\\" 96)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"crypto.test.ts\\" 91))
        )
        "
`;

exports[`Crypto expressions Signatures CheckSignature 2`] = `
"{
    \\"micheline\\": \\"parameter (signature %checkSignature);\\\\nstorage   bool;\\\\ncode\\\\n  {\\\\n    CAR;        # @parameter\\\\n    # == checkSignature ==\\\\n    # self.data = sp.check_signature(sp.key('edpku3g7CeTEvSKhxipD4Q2B6EiEP8cR323u8PFmGFgKRVRvCneEmT'), params, sp.bytes('0x01')) # @parameter\\\\n    PUSH bytes 0x01; # bytes : @parameter\\\\n    SWAP;       # @parameter : bytes\\\\n    PUSH key \\\\\\"edpku3g7CeTEvSKhxipD4Q2B6EiEP8cR323u8PFmGFgKRVRvCneEmT\\\\\\"; # key : @parameter : bytes\\\\n    CHECK_SIGNATURE; # bool\\\\n    NIL operation; # list operation : bool\\\\n    PAIR;       # pair (list operation) bool\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"bool\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"signature\\",
                    \\"annots\\": [
                        \\"%checkSignature\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"bytes\\"
                            },
                            {
                                \\"bytes\\": \\"01\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"SWAP\\"
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"key\\"
                            },
                            {
                                \\"string\\": \\"edpku3g7CeTEvSKhxipD4Q2B6EiEP8cR323u8PFmGFgKRVRvCneEmT\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"CHECK_SIGNATURE\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TBool)\\\\n\\\\n  @sp.entry_point\\\\n  def checkSignature(self, params):\\\\n    sp.set_type(params, sp.TSignature)\\\\n    self.data = sp.check_signature(sp.key('edpku3g7CeTEvSKhxipD4Q2B6EiEP8cR323u8PFmGFgKRVRvCneEmT'), params, sp.bytes('0x01'))\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;
