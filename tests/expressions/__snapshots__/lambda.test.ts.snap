// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Lambda expressions CallLambda 1`] = `
"
        (
            template_id (static_id 0 (\\"lambda.test.ts\\" 32))
            storage ()
            storage_type (\\"string\\")
            messages ((entry_point_1 True False False True (\\"lambda.test.ts\\" 35) ((set_type (params (\\"lambda.test.ts\\" 35)) \\"nat\\" (\\"lambda.test.ts\\" 40)) (set (data) (call_lambda (type_annotation (lambda 1 None False \\"lambda_arg\\" (\\"lambda.test.ts\\" 24) ((ifBlock (gt (lambdaParams 1 \\"lambda_arg\\" (\\"lambda.test.ts\\" 24) \\"nat\\") (literal (nat 2) (\\"lambda.test.ts\\" 26)) (\\"lambda.test.ts\\" 26)) ((result (literal (string \\"YES\\") (\\"lambda.test.ts\\" 26)) (\\"lambda.test.ts\\" 26))) (\\"lambda.test.ts\\" 26)) (elseBlock ((result (literal (string \\"NO\\") (\\"lambda.test.ts\\" 26)) (\\"lambda.test.ts\\" 26)))))) (lambda \\"nat\\" (unknown 0)) (\\"lambda.test.ts\\" 24)) (params (\\"lambda.test.ts\\" 35)) (\\"lambda.test.ts\\" 37)) (\\"lambda.test.ts\\" 37)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"lambda.test.ts\\" 32))
        )
        "
`;

exports[`Lambda expressions CallLambda 2`] = `
"{
    \\"micheline\\": \\"parameter (nat %entry_point_1);\\\\nstorage   string;\\\\ncode\\\\n  {\\\\n    CAR;\\\\n    PUSH nat 2;\\\\n    COMPARE;\\\\n    LT;\\\\n    IF\\\\n      {\\\\n        PUSH string \\\\\\"YES\\\\\\";\\\\n      }\\\\n      {\\\\n        PUSH string \\\\\\"NO\\\\\\";\\\\n      };\\\\n    NIL operation;\\\\n    PAIR;\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"string\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"nat\\",
                    \\"annots\\": [
                        \\"%entry_point_1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"nat\\"
                            },
                            {
                                \\"int\\": \\"2\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"COMPARE\\"
                    },
                    {
                        \\"prim\\": \\"LT\\"
                    },
                    {
                        \\"prim\\": \\"IF\\",
                        \\"args\\": [
                            [
                                {
                                    \\"prim\\": \\"PUSH\\",
                                    \\"args\\": [
                                        {
                                            \\"prim\\": \\"string\\"
                                        },
                                        {
                                            \\"string\\": \\"YES\\"
                                        }
                                    ]
                                }
                            ],
                            [
                                {
                                    \\"prim\\": \\"PUSH\\",
                                    \\"args\\": [
                                        {
                                            \\"prim\\": \\"string\\"
                                        },
                                        {
                                            \\"string\\": \\"NO\\"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TString)\\\\n\\\\n  @sp.entry_point\\\\n  def entry_point_1(self, params):\\\\n    sp.set_type(params, sp.TNat)\\\\n    def flambda_arg(lambda_arg):\\\\n      sp.if lambda_arg > 2:\\\\n        sp.result('YES')\\\\n      sp.else:\\\\n        sp.result('NO')\\\\n    self.data = sp.set_type_expr(sp.build_lambda(flambda_arg), sp.TLambda(sp.TNat, sp.TString))(params)\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Lambda expressions Lambda with variant 1`] = `"(type_annotation (lambda 2 None False \\"lambda_arg\\" (\\"lambda.test.ts\\" 43) ((defineLocal \\"result\\" (literal (int 0) (\\"lambda.test.ts\\" 50)) True (\\"lambda.test.ts\\" 50)) (match_cases (lambdaParams 2 \\"lambda_arg\\" (\\"lambda.test.ts\\" 43) (variant ((add (tuple \\"int\\" \\"int\\")) (subtract (tuple \\"int\\" \\"int\\"))) (Some ((\\"add\\") (\\"subtract\\"))) (\\"\\" -1))) \\"__MATCH_1__\\" ((match (cases_arg \\"__MATCH_1__\\" (\\"lambda.test.ts\\" 50)) add \\"__MATCH_1___add\\" ((set (getLocal \\"result\\" (\\"lambda.test.ts\\" 50)) (add (first (variant_arg \\"__MATCH_1___add\\" (\\"lambda.test.ts\\" 50)) (\\"lambda.test.ts\\" 50)) (second (variant_arg \\"__MATCH_1___add\\" (\\"lambda.test.ts\\" 50)) (\\"lambda.test.ts\\" 50)) (\\"lambda.test.ts\\" 50)) (\\"lambda.test.ts\\" 50))) (\\"lambda.test.ts\\" 50)) (match (cases_arg \\"__MATCH_1__\\" (\\"lambda.test.ts\\" 50)) subtract \\"__MATCH_1___subtract\\" ((set (getLocal \\"result\\" (\\"lambda.test.ts\\" 50)) (sub (first (variant_arg \\"__MATCH_1___subtract\\" (\\"lambda.test.ts\\" 50)) (\\"lambda.test.ts\\" 50)) (second (variant_arg \\"__MATCH_1___subtract\\" (\\"lambda.test.ts\\" 50)) (\\"lambda.test.ts\\" 50)) (\\"lambda.test.ts\\" 50)) (\\"lambda.test.ts\\" 50))) (\\"lambda.test.ts\\" 50))) (\\"lambda.test.ts\\" 50)) (result (getLocal \\"result\\" (\\"lambda.test.ts\\" 50)) (\\"lambda.test.ts\\" 50)))) (lambda (variant ((add (tuple \\"int\\" \\"int\\")) (subtract (tuple \\"int\\" \\"int\\"))) (Some ((\\"add\\") (\\"subtract\\"))) (\\"\\" -1)) (unknown 0)) (\\"lambda.test.ts\\" 43))"`;

exports[`Lambda expressions Lambda with variant 2`] = `
"{
    \\"micheline\\": \\"{ IF_LEFT { UNPAIR; ADD } { UNPAIR; SUB } }\\",
    \\"json\\": [
        {
            \\"prim\\": \\"IF_LEFT\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"UNPAIR\\"
                    },
                    {
                        \\"prim\\": \\"ADD\\"
                    }
                ],
                [
                    {
                        \\"prim\\": \\"UNPAIR\\"
                    },
                    {
                        \\"prim\\": \\"SUB\\"
                    }
                ]
            ]
        }
    ]
}"
`;
