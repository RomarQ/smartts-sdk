// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test Variant statements MatchVariant 1 1`] = `
"
        (
            template_id (static_id 0 (\\"variant.test.ts\\" 9))
            storage (literal (string \\"\\") (\\"variant.test.ts\\" 9))
            storage_type ((unknown 0))
            messages ((ep1 True False False True (\\"variant.test.ts\\" 10) ((set_type (params (\\"variant.test.ts\\" 10)) (variant ((action1 \\"string\\") (action2 \\"string\\")) (Some ((\\"action1\\") (\\"action2\\"))) (\\"\\" -1)) (\\"variant.test.ts\\" 17)) (match_cases (params (\\"variant.test.ts\\" 10)) \\"__MATCH_1__\\" ((match (cases_arg \\"__MATCH_1__\\" (\\"variant.test.ts\\" 10)) action1 \\"__MATCH_1___action1\\" ((set (data) (variant_arg \\"__MATCH_1___action1\\" (\\"variant.test.ts\\" 10)) (\\"variant.test.ts\\" 10))) (\\"variant.test.ts\\" 10)) (match (cases_arg \\"__MATCH_1__\\" (\\"variant.test.ts\\" 10)) action2 \\"__MATCH_1___action2\\" ((set (data) (variant_arg \\"__MATCH_1___action2\\" (\\"variant.test.ts\\" 10)) (\\"variant.test.ts\\" 10))) (\\"variant.test.ts\\" 10))) (\\"variant.test.ts\\" 10)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"variant.test.ts\\" 9))
        )
        "
`;

exports[`Test Variant statements MatchVariant 1 2`] = `
"{
    \\"micheline\\": \\"parameter (or %ep1 (string %action1) (string %action2));\\\\nstorage   string;\\\\ncode\\\\n  {\\\\n    CAR;        # @parameter\\\\n    # == ep1 ==\\\\n    # with params.match_cases(...): # @parameter\\\\n    IF_LEFT\\\\n      {\\\\n        # self.data = __MATCH_1___action1 # @parameter%action1\\\\n      }\\\\n      {\\\\n        # self.data = __MATCH_1___action2 # @parameter%action2\\\\n      }; # string\\\\n    NIL operation; # list operation : string\\\\n    PAIR;       # pair (list operation) string\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"string\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"or\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"string\\",
                            \\"annots\\": [
                                \\"%action1\\"
                            ]
                        },
                        {
                            \\"prim\\": \\"string\\",
                            \\"annots\\": [
                                \\"%action2\\"
                            ]
                        }
                    ],
                    \\"annots\\": [
                        \\"%ep1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"IF_LEFT\\",
                        \\"args\\": [
                            [],
                            []
                        ]
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TString)\\\\n    self.init('')\\\\n\\\\n  @sp.entry_point\\\\n  def ep1(self, params):\\\\n    sp.set_type(params, sp.TVariant(action1 = sp.TString, action2 = sp.TString).layout((\\\\\\"action1\\\\\\", \\\\\\"action2\\\\\\")))\\\\n    with params.match_cases() as arg:\\\\n      with arg.match('action1') as __MATCH_1___action1:\\\\n        self.data = __MATCH_1___action1\\\\n      with arg.match('action2') as __MATCH_1___action2:\\\\n        self.data = __MATCH_1___action2\\\\n\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Test Variant statements MatchVariant 2 1`] = `
"
        (
            template_id (static_id 0 (\\"variant.test.ts\\" 20))
            storage (literal (string \\"\\") (\\"variant.test.ts\\" 20))
            storage_type ((unknown 0))
            messages ((ep1 True False False True (\\"variant.test.ts\\" 21) ((set_type (params (\\"variant.test.ts\\" 21)) (list (variant ((action1 \\"string\\") (action2 \\"string\\")) (Some ((\\"action1\\") (\\"action2\\"))) (\\"\\" -1))) (\\"variant.test.ts\\" 32)) (forGroup \\"__ITERATOR_FOREACH_2__\\" (params (\\"variant.test.ts\\" 21)) ((match_cases (iter \\"__ITERATOR_FOREACH_2__\\" (\\"variant.test.ts\\" 23)) \\"__MATCH_3__\\" ((match (cases_arg \\"__MATCH_3__\\" (\\"variant.test.ts\\" 23)) action1 \\"__MATCH_3___action1\\" ((set (data) (variant_arg \\"__MATCH_3___action1\\" (\\"variant.test.ts\\" 23)) (\\"variant.test.ts\\" 23))) (\\"variant.test.ts\\" 23)) (match (cases_arg \\"__MATCH_3__\\" (\\"variant.test.ts\\" 23)) action2 \\"__MATCH_3___action2\\" ((set (data) (variant_arg \\"__MATCH_3___action2\\" (\\"variant.test.ts\\" 23)) (\\"variant.test.ts\\" 23))) (\\"variant.test.ts\\" 23))) (\\"variant.test.ts\\" 23))) (\\"variant.test.ts\\" 23)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"variant.test.ts\\" 20))
        )
        "
`;

exports[`Test Variant statements MatchVariant 2 2`] = `
"{
    \\"micheline\\": \\"parameter (list %ep1 (or (string %action1) (string %action2)));\\\\nstorage   string;\\\\ncode\\\\n  {\\\\n    UNPAIR;     # @parameter : @storage\\\\n    # == ep1 ==\\\\n    # for __ITERATOR_FOREACH_2__ in params: ... # @parameter : @storage\\\\n    DUP;        # @parameter : @parameter : @storage\\\\n    ITER\\\\n      {\\\\n        # with __ITERATOR_FOREACH_2__.match_cases(...): # or (string %action1) (string %action2) : @parameter : @storage\\\\n        IF_LEFT\\\\n          {\\\\n            DIG 2;      # @storage : string : @parameter\\\\n            DROP;       # string : @parameter\\\\n            SWAP;       # @parameter : string\\\\n            # self.data = __MATCH_3___action1 # @parameter : string\\\\n          }\\\\n          {\\\\n            DIG 2;      # @storage : string : @parameter\\\\n            DROP;       # string : @parameter\\\\n            SWAP;       # @parameter : string\\\\n            # self.data = __MATCH_3___action2 # @parameter : string\\\\n          }; # list (or (string %action1) (string %action2)) : string\\\\n      }; # @parameter : @storage\\\\n    DROP;       # @storage\\\\n    NIL operation; # list operation : @storage\\\\n    PAIR;       # pair (list operation) @storage\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"string\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"list\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"or\\",
                            \\"args\\": [
                                {
                                    \\"prim\\": \\"string\\",
                                    \\"annots\\": [
                                        \\"%action1\\"
                                    ]
                                },
                                {
                                    \\"prim\\": \\"string\\",
                                    \\"annots\\": [
                                        \\"%action2\\"
                                    ]
                                }
                            ]
                        }
                    ],
                    \\"annots\\": [
                        \\"%ep1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"UNPAIR\\"
                    },
                    {
                        \\"prim\\": \\"DUP\\"
                    },
                    {
                        \\"prim\\": \\"ITER\\",
                        \\"args\\": [
                            [
                                {
                                    \\"prim\\": \\"IF_LEFT\\",
                                    \\"args\\": [
                                        [
                                            {
                                                \\"prim\\": \\"DIG\\",
                                                \\"args\\": [
                                                    {
                                                        \\"int\\": \\"2\\"
                                                    }
                                                ]
                                            },
                                            {
                                                \\"prim\\": \\"DROP\\"
                                            },
                                            {
                                                \\"prim\\": \\"SWAP\\"
                                            }
                                        ],
                                        [
                                            {
                                                \\"prim\\": \\"DIG\\",
                                                \\"args\\": [
                                                    {
                                                        \\"int\\": \\"2\\"
                                                    }
                                                ]
                                            },
                                            {
                                                \\"prim\\": \\"DROP\\"
                                            },
                                            {
                                                \\"prim\\": \\"SWAP\\"
                                            }
                                        ]
                                    ]
                                }
                            ]
                        ]
                    },
                    {
                        \\"prim\\": \\"DROP\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TString)\\\\n    self.init('')\\\\n\\\\n  @sp.entry_point\\\\n  def ep1(self, params):\\\\n    sp.set_type(params, sp.TList(sp.TVariant(action1 = sp.TString, action2 = sp.TString).layout((\\\\\\"action1\\\\\\", \\\\\\"action2\\\\\\"))))\\\\n    sp.for __ITERATOR_FOREACH_2__ in params:\\\\n      with __ITERATOR_FOREACH_2__.match_cases() as arg:\\\\n        with arg.match('action1') as __MATCH_3___action1:\\\\n          self.data = __MATCH_3___action1\\\\n        with arg.match('action2') as __MATCH_3___action2:\\\\n          self.data = __MATCH_3___action2\\\\n\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;
