// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test (If) statement With (Then) and (Else) - [chaining version] 1`] = `
"
        (
            template_id (static_id 0 (\\"if.test.ts\\" 48))
            storage (literal (nat 1) (\\"if.test.ts\\" 48))
            storage_type ((unknown 0))
            messages ((ep1 True False False True (\\"if.test.ts\\" 49) ((set_type (params (\\"if.test.ts\\" 49)) \\"nat\\" (\\"if.test.ts\\" 56)) (ifBlock (ge (params (\\"if.test.ts\\" 49)) (literal (nat 5) (\\"if.test.ts\\" 49)) (\\"if.test.ts\\" 49)) ((set (data) (params (\\"if.test.ts\\" 49)) (\\"if.test.ts\\" 49))) (\\"if.test.ts\\" 49)) (elseBlock ((set (data) (literal (nat 5) (\\"if.test.ts\\" 49)) (\\"if.test.ts\\" 49)))))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"if.test.ts\\" 48))
        )
        "
`;

exports[`Test (If) statement With (Then) and (Else) - [chaining version] 2`] = `
"{
    \\"micheline\\": \\"parameter (nat %ep1);\\\\nstorage   nat;\\\\ncode\\\\n  {\\\\n    CAR;        # @parameter\\\\n    # == ep1 ==\\\\n    # if params >= 5: # @parameter\\\\n    DUP;        # @parameter : @parameter\\\\n    PUSH nat 5; # nat : @parameter : @parameter\\\\n    SWAP;       # @parameter : nat : @parameter\\\\n    COMPARE;    # int : @parameter\\\\n    GE;         # bool : @parameter\\\\n    IF\\\\n      {\\\\n        # self.data = params # @parameter\\\\n      }\\\\n      {\\\\n        DROP;       # \\\\n        # self.data = 5 # \\\\n        PUSH nat 5; # nat\\\\n      }; # nat\\\\n    NIL operation; # list operation : nat\\\\n    PAIR;       # pair (list operation) nat\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"nat\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"nat\\",
                    \\"annots\\": [
                        \\"%ep1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"DUP\\"
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"nat\\"
                            },
                            {
                                \\"int\\": \\"5\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"SWAP\\"
                    },
                    {
                        \\"prim\\": \\"COMPARE\\"
                    },
                    {
                        \\"prim\\": \\"GE\\"
                    },
                    {
                        \\"prim\\": \\"IF\\",
                        \\"args\\": [
                            [],
                            [
                                {
                                    \\"prim\\": \\"DROP\\"
                                },
                                {
                                    \\"prim\\": \\"PUSH\\",
                                    \\"args\\": [
                                        {
                                            \\"prim\\": \\"nat\\"
                                        },
                                        {
                                            \\"int\\": \\"5\\"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TNat)\\\\n    self.init(1)\\\\n\\\\n  @sp.entry_point\\\\n  def ep1(self, params):\\\\n    sp.set_type(params, sp.TNat)\\\\n    sp.if params >= 5:\\\\n      self.data = params\\\\n    sp.else:\\\\n      self.data = 5\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Test (If) statement With (Then) and (Else) 1`] = `
"
        (
            template_id (static_id 0 (\\"if.test.ts\\" 31))
            storage (literal (nat 1) (\\"if.test.ts\\" 32))
            storage_type ((unknown 0))
            messages ((ep1 True False False True (\\"if.test.ts\\" 34) ((set_type (params (\\"if.test.ts\\" 34)) \\"nat\\" (\\"if.test.ts\\" 45)) (ifBlock (ge (params (\\"if.test.ts\\" 34)) (literal (nat 5) (\\"if.test.ts\\" 36)) (\\"if.test.ts\\" 36)) ((set (data) (params (\\"if.test.ts\\" 34)) (\\"if.test.ts\\" 36))) (\\"if.test.ts\\" 36)) (elseBlock ((set (data) (literal (nat 5) (\\"if.test.ts\\" 36)) (\\"if.test.ts\\" 36)))))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"if.test.ts\\" 31))
        )
        "
`;

exports[`Test (If) statement With (Then) and (Else) 2`] = `
"{
    \\"micheline\\": \\"parameter (nat %ep1);\\\\nstorage   nat;\\\\ncode\\\\n  {\\\\n    CAR;        # @parameter\\\\n    # == ep1 ==\\\\n    # if params >= 5: # @parameter\\\\n    DUP;        # @parameter : @parameter\\\\n    PUSH nat 5; # nat : @parameter : @parameter\\\\n    SWAP;       # @parameter : nat : @parameter\\\\n    COMPARE;    # int : @parameter\\\\n    GE;         # bool : @parameter\\\\n    IF\\\\n      {\\\\n        # self.data = params # @parameter\\\\n      }\\\\n      {\\\\n        DROP;       # \\\\n        # self.data = 5 # \\\\n        PUSH nat 5; # nat\\\\n      }; # nat\\\\n    NIL operation; # list operation : nat\\\\n    PAIR;       # pair (list operation) nat\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"nat\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"nat\\",
                    \\"annots\\": [
                        \\"%ep1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"DUP\\"
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"nat\\"
                            },
                            {
                                \\"int\\": \\"5\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"SWAP\\"
                    },
                    {
                        \\"prim\\": \\"COMPARE\\"
                    },
                    {
                        \\"prim\\": \\"GE\\"
                    },
                    {
                        \\"prim\\": \\"IF\\",
                        \\"args\\": [
                            [],
                            [
                                {
                                    \\"prim\\": \\"DROP\\"
                                },
                                {
                                    \\"prim\\": \\"PUSH\\",
                                    \\"args\\": [
                                        {
                                            \\"prim\\": \\"nat\\"
                                        },
                                        {
                                            \\"int\\": \\"5\\"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TNat)\\\\n    self.init(1)\\\\n\\\\n  @sp.entry_point\\\\n  def ep1(self, params):\\\\n    sp.set_type(params, sp.TNat)\\\\n    sp.if params >= 5:\\\\n      self.data = params\\\\n    sp.else:\\\\n      self.data = 5\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Test (If) statement Without (Else) - [chaining version] 1`] = `
"
        (
            template_id (static_id 0 (\\"if.test.ts\\" 20))
            storage (literal (nat 1) (\\"if.test.ts\\" 21))
            storage_type ((unknown 0))
            messages ((ep1 True False False True (\\"if.test.ts\\" 23) ((set_type (params (\\"if.test.ts\\" 23)) \\"nat\\" (\\"if.test.ts\\" 28)) (ifBlock (ge (params (\\"if.test.ts\\" 23)) (literal (nat 5) (\\"if.test.ts\\" 25)) (\\"if.test.ts\\" 25)) ((set (data) (params (\\"if.test.ts\\" 23)) (\\"if.test.ts\\" 25))) (\\"if.test.ts\\" 25)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"if.test.ts\\" 20))
        )
        "
`;

exports[`Test (If) statement Without (Else) - [chaining version] 2`] = `
"{
    \\"micheline\\": \\"parameter (nat %ep1);\\\\nstorage   nat;\\\\ncode\\\\n  {\\\\n    UNPAIR;     # @parameter : @storage\\\\n    # == ep1 ==\\\\n    # if params >= 5: # @parameter : @storage\\\\n    DUP;        # @parameter : @parameter : @storage\\\\n    PUSH nat 5; # nat : @parameter : @parameter : @storage\\\\n    SWAP;       # @parameter : nat : @parameter : @storage\\\\n    COMPARE;    # int : @parameter : @storage\\\\n    GE;         # bool : @parameter : @storage\\\\n    IF\\\\n      {\\\\n        SWAP;       # @storage : @parameter\\\\n        DROP;       # @parameter\\\\n        # self.data = params # @parameter\\\\n      }\\\\n      {\\\\n        DROP;       # @storage\\\\n      }; # nat\\\\n    NIL operation; # list operation : nat\\\\n    PAIR;       # pair (list operation) nat\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"nat\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"nat\\",
                    \\"annots\\": [
                        \\"%ep1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"UNPAIR\\"
                    },
                    {
                        \\"prim\\": \\"DUP\\"
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"nat\\"
                            },
                            {
                                \\"int\\": \\"5\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"SWAP\\"
                    },
                    {
                        \\"prim\\": \\"COMPARE\\"
                    },
                    {
                        \\"prim\\": \\"GE\\"
                    },
                    {
                        \\"prim\\": \\"IF\\",
                        \\"args\\": [
                            [
                                {
                                    \\"prim\\": \\"SWAP\\"
                                },
                                {
                                    \\"prim\\": \\"DROP\\"
                                }
                            ],
                            [
                                {
                                    \\"prim\\": \\"DROP\\"
                                }
                            ]
                        ]
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TNat)\\\\n    self.init(1)\\\\n\\\\n  @sp.entry_point\\\\n  def ep1(self, params):\\\\n    sp.set_type(params, sp.TNat)\\\\n    sp.if params >= 5:\\\\n      self.data = params\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Test (If) statement Without (Else) 1`] = `
"
        (
            template_id (static_id 0 (\\"if.test.ts\\" 9))
            storage (literal (nat 1) (\\"if.test.ts\\" 10))
            storage_type ((unknown 0))
            messages ((ep1 True False False True (\\"if.test.ts\\" 12) ((set_type (params (\\"if.test.ts\\" 12)) \\"nat\\" (\\"if.test.ts\\" 17)) (ifBlock (ge (params (\\"if.test.ts\\" 12)) (literal (nat 5) (\\"if.test.ts\\" 14)) (\\"if.test.ts\\" 14)) ((set (data) (params (\\"if.test.ts\\" 12)) (\\"if.test.ts\\" 14))) (\\"if.test.ts\\" 14)))))
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"if.test.ts\\" 9))
        )
        "
`;

exports[`Test (If) statement Without (Else) 2`] = `
"{
    \\"micheline\\": \\"parameter (nat %ep1);\\\\nstorage   nat;\\\\ncode\\\\n  {\\\\n    UNPAIR;     # @parameter : @storage\\\\n    # == ep1 ==\\\\n    # if params >= 5: # @parameter : @storage\\\\n    DUP;        # @parameter : @parameter : @storage\\\\n    PUSH nat 5; # nat : @parameter : @parameter : @storage\\\\n    SWAP;       # @parameter : nat : @parameter : @storage\\\\n    COMPARE;    # int : @parameter : @storage\\\\n    GE;         # bool : @parameter : @storage\\\\n    IF\\\\n      {\\\\n        SWAP;       # @storage : @parameter\\\\n        DROP;       # @parameter\\\\n        # self.data = params # @parameter\\\\n      }\\\\n      {\\\\n        DROP;       # @storage\\\\n      }; # nat\\\\n    NIL operation; # list operation : nat\\\\n    PAIR;       # pair (list operation) nat\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"nat\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"nat\\",
                    \\"annots\\": [
                        \\"%ep1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"UNPAIR\\"
                    },
                    {
                        \\"prim\\": \\"DUP\\"
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"nat\\"
                            },
                            {
                                \\"int\\": \\"5\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"SWAP\\"
                    },
                    {
                        \\"prim\\": \\"COMPARE\\"
                    },
                    {
                        \\"prim\\": \\"GE\\"
                    },
                    {
                        \\"prim\\": \\"IF\\",
                        \\"args\\": [
                            [
                                {
                                    \\"prim\\": \\"SWAP\\"
                                },
                                {
                                    \\"prim\\": \\"DROP\\"
                                }
                            ],
                            [
                                {
                                    \\"prim\\": \\"DROP\\"
                                }
                            ]
                        ]
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TNat)\\\\n    self.init(1)\\\\n\\\\n  @sp.entry_point\\\\n  def ep1(self, params):\\\\n    sp.set_type(params, sp.TNat)\\\\n    sp.if params >= 5:\\\\n      self.data = params\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;
