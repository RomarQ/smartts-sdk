// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Compile Contract Contract 1 1`] = `
"
        (
            template_id (static_id 0 (\\"Compilation.test.ts\\" 52))
            storage (list (\\"Compilation.test.ts\\" 54) )
            storage_type ((list \\"nat\\"))
            messages ((ep1 True False False True (\\"Compilation.test.ts\\" 60) ((set_type (params (\\"Compilation.test.ts\\" 60)) (list \\"nat\\") (\\"Compilation.test.ts\\" 73)) (defineLocal \\"some_address\\" (literal (address tz1) (\\"Compilation.test.ts\\" 63)) True (\\"Compilation.test.ts\\" 63)) (verify (eq (getLocal \\"some_address\\" (\\"Compilation.test.ts\\" 63)) (sender) (\\"Compilation.test.ts\\" 63)) (literal (string \\"Not Admin!\\") (\\"Compilation.test.ts\\" 63)) (\\"Compilation.test.ts\\" 63)) (set (data) (params (\\"Compilation.test.ts\\" 60)) (\\"Compilation.test.ts\\" 63)))))
            flags ((erase-comments))
            privates ()
            views ((onchain view True (\\"Compilation.test.ts\\" 72) False \\"\\" ((set_type (params (\\"Compilation.test.ts\\" 72)) \\"unit\\" (\\"Compilation.test.ts\\" 73)) (result (params (\\"Compilation.test.ts\\" 72)) (\\"Compilation.test.ts\\" 72)))))
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 100) (\\"Compilation.test.ts\\" 56))
        )
        "
`;

exports[`Compile Contract Contract 1 2`] = `
"[
    {
        \\"prim\\": \\"storage\\",
        \\"args\\": [
            {
                \\"prim\\": \\"list\\",
                \\"args\\": [
                    {
                        \\"prim\\": \\"nat\\"
                    }
                ]
            }
        ]
    },
    {
        \\"prim\\": \\"parameter\\",
        \\"args\\": [
            {
                \\"prim\\": \\"list\\",
                \\"args\\": [
                    {
                        \\"prim\\": \\"nat\\"
                    }
                ],
                \\"annots\\": [
                    \\"%ep1\\"
                ]
            }
        ]
    },
    {
        \\"prim\\": \\"code\\",
        \\"args\\": [
            [
                {
                    \\"prim\\": \\"CAR\\"
                },
                {
                    \\"prim\\": \\"PUSH\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"address\\"
                        },
                        {
                            \\"string\\": \\"tz1\\"
                        }
                    ]
                },
                {
                    \\"prim\\": \\"SENDER\\"
                },
                {
                    \\"prim\\": \\"COMPARE\\"
                },
                {
                    \\"prim\\": \\"EQ\\"
                },
                {
                    \\"prim\\": \\"IF\\",
                    \\"args\\": [
                        [],
                        [
                            {
                                \\"prim\\": \\"PUSH\\",
                                \\"args\\": [
                                    {
                                        \\"prim\\": \\"string\\"
                                    },
                                    {
                                        \\"string\\": \\"Not Admin!\\"
                                    }
                                ]
                            },
                            {
                                \\"prim\\": \\"FAILWITH\\"
                            }
                        ]
                    ]
                },
                {
                    \\"prim\\": \\"NIL\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"operation\\"
                        }
                    ]
                },
                {
                    \\"prim\\": \\"PAIR\\"
                }
            ]
        ]
    },
    {
        \\"prim\\": \\"view\\",
        \\"args\\": [
            {
                \\"string\\": \\"view\\"
            },
            {
                \\"prim\\": \\"unit\\"
            },
            {
                \\"prim\\": \\"unit\\"
            },
            [
                {
                    \\"prim\\": \\"CAR\\"
                }
            ]
        ]
    }
]"
`;

exports[`Compile Contract Storage (None) 1`] = `
"
        (
            template_id (static_id 0 (\\"Compilation.test.ts\\" 93))
            storage (variant \\"None\\" (unit) (\\"Compilation.test.ts\\" 93))
            storage_type ((option \\"nat\\"))
            messages ()
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"Compilation.test.ts\\" 93))
        )
        "
`;

exports[`Compile Contract Storage (None) 2`] = `
"[
    {
        \\"prim\\": \\"storage\\",
        \\"args\\": [
            {
                \\"prim\\": \\"option\\",
                \\"args\\": [
                    {
                        \\"prim\\": \\"nat\\"
                    }
                ]
            }
        ]
    },
    {
        \\"prim\\": \\"parameter\\",
        \\"args\\": [
            {
                \\"prim\\": \\"unit\\"
            }
        ]
    },
    {
        \\"prim\\": \\"code\\",
        \\"args\\": [
            [
                {
                    \\"prim\\": \\"CDR\\"
                },
                {
                    \\"prim\\": \\"NIL\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"operation\\"
                        }
                    ]
                },
                {
                    \\"prim\\": \\"PAIR\\"
                }
            ]
        ]
    }
]"
`;

exports[`Compile Contract Storage (Record) 1`] = `
"
        (
            template_id (static_id 0 (\\"Compilation.test.ts\\" 100))
            storage (record (\\"Compilation.test.ts\\" 102) (testField1 (literal (nat 1) (\\"Compilation.test.ts\\" 103))) (testField2 (list (\\"Compilation.test.ts\\" 104) (literal (string \\"Hello World\\") (\\"Compilation.test.ts\\" 104)))))
            storage_type (())
            messages ()
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"Compilation.test.ts\\" 100))
        )
        "
`;

exports[`Compile Contract Storage (Record) 2`] = `
"[
    {
        \\"prim\\": \\"storage\\",
        \\"args\\": [
            {
                \\"prim\\": \\"pair\\",
                \\"args\\": [
                    {
                        \\"prim\\": \\"nat\\",
                        \\"annots\\": [
                            \\"%testField1\\"
                        ]
                    },
                    {
                        \\"prim\\": \\"list\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"string\\"
                            }
                        ],
                        \\"annots\\": [
                            \\"%testField2\\"
                        ]
                    }
                ]
            }
        ]
    },
    {
        \\"prim\\": \\"parameter\\",
        \\"args\\": [
            {
                \\"prim\\": \\"unit\\"
            }
        ]
    },
    {
        \\"prim\\": \\"code\\",
        \\"args\\": [
            [
                {
                    \\"prim\\": \\"CDR\\"
                },
                {
                    \\"prim\\": \\"NIL\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"operation\\"
                        }
                    ]
                },
                {
                    \\"prim\\": \\"PAIR\\"
                }
            ]
        ]
    }
]"
`;

exports[`Compile Contract Storage (Some) 1`] = `
"
        (
            template_id (static_id 0 (\\"Compilation.test.ts\\" 87))
            storage (variant \\"Some\\" (literal (nat 1) (\\"Compilation.test.ts\\" 87)) (\\"Compilation.test.ts\\" 87))
            storage_type (())
            messages ()
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"Compilation.test.ts\\" 87))
        )
        "
`;

exports[`Compile Contract Storage (Some) 2`] = `
"[
    {
        \\"prim\\": \\"storage\\",
        \\"args\\": [
            {
                \\"prim\\": \\"option\\",
                \\"args\\": [
                    {
                        \\"prim\\": \\"nat\\"
                    }
                ]
            }
        ]
    },
    {
        \\"prim\\": \\"parameter\\",
        \\"args\\": [
            {
                \\"prim\\": \\"unit\\"
            }
        ]
    },
    {
        \\"prim\\": \\"code\\",
        \\"args\\": [
            [
                {
                    \\"prim\\": \\"CDR\\"
                },
                {
                    \\"prim\\": \\"NIL\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"operation\\"
                        }
                    ]
                },
                {
                    \\"prim\\": \\"PAIR\\"
                }
            ]
        ]
    }
]"
`;

exports[`Compile Contract Storage (Unit) 1`] = `
"
        (
            template_id (static_id 0 (\\"Compilation.test.ts\\" 80))
            storage (unit)
            storage_type (())
            messages ()
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"Compilation.test.ts\\" 80))
        )
        "
`;

exports[`Compile Contract Storage (Unit) 2`] = `
"[
    {
        \\"prim\\": \\"storage\\",
        \\"args\\": [
            {
                \\"prim\\": \\"unit\\"
            }
        ]
    },
    {
        \\"prim\\": \\"parameter\\",
        \\"args\\": [
            {
                \\"prim\\": \\"unit\\"
            }
        ]
    },
    {
        \\"prim\\": \\"code\\",
        \\"args\\": [
            [
                {
                    \\"prim\\": \\"CDR\\"
                },
                {
                    \\"prim\\": \\"NIL\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"operation\\"
                        }
                    ]
                },
                {
                    \\"prim\\": \\"PAIR\\"
                }
            ]
        ]
    }
]"
`;

exports[`Compile Lambdas  A Lambda that returns "YES" if the argument is greater than or equal to Nat(10), returns "NO" otherwise 1`] = `"(lambda 2 None False \\"lambda_arg\\" (\\"Compilation.test.ts\\" 37) ((ifBlock (ge (lambdaParams 2 \\"lambda_arg\\" (\\"Compilation.test.ts\\" 37) (unknown 0)) (literal (nat 1) (\\"Compilation.test.ts\\" 38)) (\\"Compilation.test.ts\\" 38)) ((result (literal (string \\"YES\\") (\\"Compilation.test.ts\\" 38)) (\\"Compilation.test.ts\\" 38))) (\\"Compilation.test.ts\\" 38)) (elseBlock ((result (literal (string \\"NO\\") (\\"Compilation.test.ts\\" 38)) (\\"Compilation.test.ts\\" 38))))))"`;

exports[`Compile Lambdas  A Lambda that returns "YES" if the argument is greater than or equal to Nat(10), returns "NO" otherwise 2`] = `
"{
    \\"micheline\\": \\"{ PUSH nat 1; SWAP; COMPARE; GE; IF { PUSH string \\\\\\"YES\\\\\\" } { PUSH string \\\\\\"NO\\\\\\" } }\\",
    \\"json\\": [
        {
            \\"prim\\": \\"PUSH\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"nat\\"
                },
                {
                    \\"int\\": \\"1\\"
                }
            ]
        },
        {
            \\"prim\\": \\"SWAP\\"
        },
        {
            \\"prim\\": \\"COMPARE\\"
        },
        {
            \\"prim\\": \\"GE\\"
        },
        {
            \\"prim\\": \\"IF\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"string\\"
                            },
                            {
                                \\"string\\": \\"YES\\"
                            }
                        ]
                    }
                ],
                [
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"string\\"
                            },
                            {
                                \\"string\\": \\"NO\\"
                            }
                        ]
                    }
                ]
            ]
        }
    ]
}"
`;

exports[`Compile Lambdas A Lambda that returns the argument 1`] = `"(lambda 1 None False \\"lambda_arg\\" (\\"Compilation.test.ts\\" 25) ((ifBlock (eq (lambdaParams 1 \\"lambda_arg\\" (\\"Compilation.test.ts\\" 25) (unknown 0)) (literal (string \\"TEST\\") (\\"Compilation.test.ts\\" 26)) (\\"Compilation.test.ts\\" 26)) ((result (lambdaParams 1 \\"lambda_arg\\" (\\"Compilation.test.ts\\" 25) (unknown 0)) (\\"Compilation.test.ts\\" 26))) (\\"Compilation.test.ts\\" 26)) (elseBlock ((failwith (lambdaParams 1 \\"lambda_arg\\" (\\"Compilation.test.ts\\" 25) (unknown 0)) (\\"Compilation.test.ts\\" 26))))))"`;

exports[`Compile Lambdas A Lambda that returns the argument 2`] = `
"{
    \\"micheline\\": \\"{ DUP; PUSH string \\\\\\"TEST\\\\\\"; COMPARE; EQ; IF {} { FAILWITH } }\\",
    \\"json\\": [
        {
            \\"prim\\": \\"DUP\\"
        },
        {
            \\"prim\\": \\"PUSH\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"string\\"
                },
                {
                    \\"string\\": \\"TEST\\"
                }
            ]
        },
        {
            \\"prim\\": \\"COMPARE\\"
        },
        {
            \\"prim\\": \\"EQ\\"
        },
        {
            \\"prim\\": \\"IF\\",
            \\"args\\": [
                [],
                [
                    {
                        \\"prim\\": \\"FAILWITH\\"
                    }
                ]
            ]
        }
    ]
}"
`;
