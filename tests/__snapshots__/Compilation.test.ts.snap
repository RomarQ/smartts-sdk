// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Compile Contract Contract 1 1`] = `
"
        (
            template_id (static_id 0 (\\"Compilation.test.ts\\" 52))
            storage (list (\\"Compilation.test.ts\\" 54) )
            storage_type ((list \\"nat\\"))
            messages ((ep1 True False False True (\\"Compilation.test.ts\\" 60) ((set_type (params (\\"Compilation.test.ts\\" 60)) (list \\"nat\\") (\\"Compilation.test.ts\\" 74)) (defineLocal \\"some_address\\" (literal (address KT1R9M3MDffw7qSVSnbJs46aMC9YzzZz3aGT) (\\"Compilation.test.ts\\" 63)) True (\\"Compilation.test.ts\\" 63)) (verify (eq (getLocal \\"some_address\\" (\\"Compilation.test.ts\\" 63)) (sender) (\\"Compilation.test.ts\\" 63)) (literal (string \\"Not Admin!\\") (\\"Compilation.test.ts\\" 63)) (\\"Compilation.test.ts\\" 63)) (set (data) (params (\\"Compilation.test.ts\\" 60)) (\\"Compilation.test.ts\\" 63)))))
            flags ((erase-comments))
            privates ()
            views ((onchain view True (\\"Compilation.test.ts\\" 72) False \\"\\" ((set_type (params (\\"Compilation.test.ts\\" 72)) \\"bool\\" (\\"Compilation.test.ts\\" 74)) (result (params (\\"Compilation.test.ts\\" 72)) (\\"Compilation.test.ts\\" 72)))))
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 100) (\\"Compilation.test.ts\\" 56))
        )
        "
`;

exports[`Compile Contract Contract 1 2`] = `
"{
    \\"micheline\\": \\"parameter (list %ep1 nat);\\\\nstorage   (list nat);\\\\ncode\\\\n  {\\\\n    CAR;\\\\n    PUSH address \\\\\\"KT1R9M3MDffw7qSVSnbJs46aMC9YzzZz3aGT\\\\\\";\\\\n    SENDER;\\\\n    COMPARE;\\\\n    EQ;\\\\n    IF\\\\n      {}\\\\n      {\\\\n        PUSH string \\\\\\"Not Admin!\\\\\\";\\\\n        FAILWITH;\\\\n      };\\\\n    NIL operation;\\\\n    PAIR;\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"list\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"nat\\"
                        }
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"list\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"nat\\"
                        }
                    ],
                    \\"annots\\": [
                        \\"%ep1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"address\\"
                            },
                            {
                                \\"string\\": \\"KT1R9M3MDffw7qSVSnbJs46aMC9YzzZz3aGT\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"SENDER\\"
                    },
                    {
                        \\"prim\\": \\"COMPARE\\"
                    },
                    {
                        \\"prim\\": \\"EQ\\"
                    },
                    {
                        \\"prim\\": \\"IF\\",
                        \\"args\\": [
                            [],
                            [
                                {
                                    \\"prim\\": \\"PUSH\\",
                                    \\"args\\": [
                                        {
                                            \\"prim\\": \\"string\\"
                                        },
                                        {
                                            \\"string\\": \\"Not Admin!\\"
                                        }
                                    ]
                                },
                                {
                                    \\"prim\\": \\"FAILWITH\\"
                                }
                            ]
                        ]
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        },
        {
            \\"prim\\": \\"view\\",
            \\"args\\": [
                {
                    \\"string\\": \\"view\\"
                },
                {
                    \\"prim\\": \\"bool\\"
                },
                {
                    \\"prim\\": \\"bool\\"
                },
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TList(sp.TNat))\\\\n    self.init([])\\\\n\\\\n  @sp.entry_point\\\\n  def ep1(self, params):\\\\n    sp.set_type(params, sp.TList(sp.TNat))\\\\n    some_address = sp.local(\\\\\\"some_address\\\\\\", sp.address('KT1R9M3MDffw7qSVSnbJs46aMC9YzzZz3aGT'))\\\\n    sp.verify(some_address.value == sp.sender, 'Not Admin!')\\\\n    self.data = params\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Compile Contract Contract 2 1`] = `
"
        (
            template_id (static_id 0 (\\"Compilation.test.ts\\" 78))
            storage (literal (nat 0) (\\"Compilation.test.ts\\" 80))
            storage_type ((unknown 0))
            messages ((entry_point_1 True False False True (\\"Compilation.test.ts\\" 83) ((set_type (params (\\"Compilation.test.ts\\" 83)) \\"bool\\" (\\"Compilation.test.ts\\" 104)) (set (data) (openVariant (view \\"negate\\" (self_address) (params (\\"Compilation.test.ts\\" 83)) (unknown 0) (\\"Compilation.test.ts\\" 87)) \\"Some\\" (literal (string \\"Could not call view\\") (\\"Compilation.test.ts\\" 87)) (\\"Compilation.test.ts\\" 87)) (\\"Compilation.test.ts\\" 87)))))
            flags ()
            privates ()
            views ((onchain negate True (\\"Compilation.test.ts\\" 96) False \\"\\" ((set_type (params (\\"Compilation.test.ts\\" 96)) \\"bool\\" (\\"Compilation.test.ts\\" 104)) (ifBlock (params (\\"Compilation.test.ts\\" 96)) ((result (literal (nat 1) (\\"Compilation.test.ts\\" 96)) (\\"Compilation.test.ts\\" 96))) (\\"Compilation.test.ts\\" 96)) (elseBlock ((result (literal (nat 0) (\\"Compilation.test.ts\\" 96)) (\\"Compilation.test.ts\\" 96)))))))
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"Compilation.test.ts\\" 78))
        )
        "
`;

exports[`Compile Contract Contract 2 2`] = `
"{
    \\"micheline\\": \\"parameter (bool %entry_point_1);\\\\nstorage   nat;\\\\ncode\\\\n  {\\\\n    CAR;\\\\n    SELF_ADDRESS;\\\\n    SWAP;\\\\n    VIEW \\\\\\"negate\\\\\\" nat;\\\\n    IF_NONE\\\\n      {\\\\n        PUSH string \\\\\\"Could not call view\\\\\\";\\\\n        FAILWITH;\\\\n      }\\\\n      {};\\\\n    NIL operation;\\\\n    PAIR;\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"nat\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"bool\\",
                    \\"annots\\": [
                        \\"%entry_point_1\\"
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"SELF_ADDRESS\\"
                    },
                    {
                        \\"prim\\": \\"SWAP\\"
                    },
                    {
                        \\"prim\\": \\"VIEW\\",
                        \\"args\\": [
                            {
                                \\"string\\": \\"negate\\"
                            },
                            {
                                \\"prim\\": \\"nat\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"IF_NONE\\",
                        \\"args\\": [
                            [
                                {
                                    \\"prim\\": \\"PUSH\\",
                                    \\"args\\": [
                                        {
                                            \\"prim\\": \\"string\\"
                                        },
                                        {
                                            \\"string\\": \\"Could not call view\\"
                                        }
                                    ]
                                },
                                {
                                    \\"prim\\": \\"FAILWITH\\"
                                }
                            ],
                            []
                        ]
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        },
        {
            \\"prim\\": \\"view\\",
            \\"args\\": [
                {
                    \\"string\\": \\"negate\\"
                },
                {
                    \\"prim\\": \\"bool\\"
                },
                {
                    \\"prim\\": \\"nat\\"
                },
                [
                    {
                        \\"prim\\": \\"CAR\\"
                    },
                    {
                        \\"prim\\": \\"IF\\",
                        \\"args\\": [
                            [
                                {
                                    \\"prim\\": \\"PUSH\\",
                                    \\"args\\": [
                                        {
                                            \\"prim\\": \\"nat\\"
                                        },
                                        {
                                            \\"int\\": \\"1\\"
                                        }
                                    ]
                                }
                            ],
                            [
                                {
                                    \\"prim\\": \\"PUSH\\",
                                    \\"args\\": [
                                        {
                                            \\"prim\\": \\"nat\\"
                                        },
                                        {
                                            \\"int\\": \\"0\\"
                                        }
                                    ]
                                }
                            ]
                        ]
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TNat)\\\\n    self.init(0)\\\\n\\\\n  @sp.entry_point\\\\n  def entry_point_1(self, params):\\\\n    sp.set_type(params, sp.TBool)\\\\n    self.data = sp.view(\\\\\\"negate\\\\\\", sp.self_address, params, sp.TNat).open_some(message = 'Could not call view')\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Compile Contract Storage (None) 1`] = `
"
        (
            template_id (static_id 0 (\\"Compilation.test.ts\\" 119))
            storage (variant \\"None\\" (unit) (\\"Compilation.test.ts\\" 119))
            storage_type ((option \\"nat\\"))
            messages ()
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"Compilation.test.ts\\" 119))
        )
        "
`;

exports[`Compile Contract Storage (None) 2`] = `
"{
    \\"micheline\\": \\"parameter unit;\\\\nstorage   (option nat);\\\\ncode\\\\n  {\\\\n    CDR;\\\\n    NIL operation;\\\\n    PAIR;\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"option\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"nat\\"
                        }
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"unit\\"
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CDR\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TOption(sp.TNat))\\\\n    self.init(sp.none)\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Compile Contract Storage (Record) 1`] = `
"
        (
            template_id (static_id 0 (\\"Compilation.test.ts\\" 125))
            storage (record (\\"Compilation.test.ts\\" 126) (testField1 (literal (nat 1) (\\"Compilation.test.ts\\" 127))) (testField2 (list (\\"Compilation.test.ts\\" 128) (literal (string \\"Hello World\\") (\\"Compilation.test.ts\\" 128)))))
            storage_type ((unknown 0))
            messages ()
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"Compilation.test.ts\\" 125))
        )
        "
`;

exports[`Compile Contract Storage (Record) 2`] = `
"{
    \\"micheline\\": \\"parameter unit;\\\\nstorage   (pair (nat %testField1) (list %testField2 string));\\\\ncode\\\\n  {\\\\n    CDR;\\\\n    NIL operation;\\\\n    PAIR;\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"pair\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"nat\\",
                            \\"annots\\": [
                                \\"%testField1\\"
                            ]
                        },
                        {
                            \\"prim\\": \\"list\\",
                            \\"args\\": [
                                {
                                    \\"prim\\": \\"string\\"
                                }
                            ],
                            \\"annots\\": [
                                \\"%testField2\\"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"unit\\"
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CDR\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TRecord(testField1 = sp.TNat, testField2 = sp.TList(sp.TString)).layout((\\\\\\"testField1\\\\\\", \\\\\\"testField2\\\\\\")))\\\\n    self.init(testField1 = 1,\\\\n              testField2 = ['Hello World'])\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Compile Contract Storage (Some) 1`] = `
"
        (
            template_id (static_id 0 (\\"Compilation.test.ts\\" 114))
            storage (variant \\"Some\\" (literal (nat 1) (\\"Compilation.test.ts\\" 114)) (\\"Compilation.test.ts\\" 114))
            storage_type ((unknown 0))
            messages ()
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"Compilation.test.ts\\" 114))
        )
        "
`;

exports[`Compile Contract Storage (Some) 2`] = `
"{
    \\"micheline\\": \\"parameter unit;\\\\nstorage   (option nat);\\\\ncode\\\\n  {\\\\n    CDR;\\\\n    NIL operation;\\\\n    PAIR;\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"option\\",
                    \\"args\\": [
                        {
                            \\"prim\\": \\"nat\\"
                        }
                    ]
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"unit\\"
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CDR\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TOption(sp.TNat))\\\\n    self.init(sp.some(1))\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Compile Contract Storage (Unit) 1`] = `
"
        (
            template_id (static_id 0 (\\"Compilation.test.ts\\" 108))
            storage (unit)
            storage_type ((unknown 0))
            messages ()
            flags ()
            privates ()
            views ()
            entry_points_layout ()
            initial_metadata ()
            balance (literal (mutez 0) (\\"Compilation.test.ts\\" 108))
        )
        "
`;

exports[`Compile Contract Storage (Unit) 2`] = `
"{
    \\"micheline\\": \\"parameter unit;\\\\nstorage   unit;\\\\ncode\\\\n  {\\\\n    CDR;\\\\n    NIL operation;\\\\n    PAIR;\\\\n  };\\",
    \\"json\\": [
        {
            \\"prim\\": \\"storage\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"unit\\"
                }
            ]
        },
        {
            \\"prim\\": \\"parameter\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"unit\\"
                }
            ]
        },
        {
            \\"prim\\": \\"code\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"CDR\\"
                    },
                    {
                        \\"prim\\": \\"NIL\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"operation\\"
                            }
                        ]
                    },
                    {
                        \\"prim\\": \\"PAIR\\"
                    }
                ]
            ]
        }
    ],
    \\"smartpy\\": \\"import smartpy as sp\\\\n\\\\nclass Contract(sp.Contract):\\\\n  def __init__(self):\\\\n    self.init_type(sp.TUnit)\\\\n    self.init()\\\\n\\\\nsp.add_compilation_target(\\\\\\"visualtez_compilation\\\\\\", Contract())\\"
}"
`;

exports[`Compile Values A Lambda that returns "YES" if the argument is greater than or equal to Nat(10), returns "NO" otherwise 1`] = `"(lambda 2 None False \\"lambda_arg\\" (\\"Compilation.test.ts\\" 37) ((ifBlock (ge (lambdaParams 2 \\"lambda_arg\\" (\\"Compilation.test.ts\\" 37) (unknown 0)) (literal (nat 1) (\\"Compilation.test.ts\\" 37)) (\\"Compilation.test.ts\\" 37)) ((result (literal (string \\"YES\\") (\\"Compilation.test.ts\\" 37)) (\\"Compilation.test.ts\\" 37))) (\\"Compilation.test.ts\\" 37)) (elseBlock ((result (literal (string \\"NO\\") (\\"Compilation.test.ts\\" 37)) (\\"Compilation.test.ts\\" 37))))))"`;

exports[`Compile Values A Lambda that returns "YES" if the argument is greater than or equal to Nat(10), returns "NO" otherwise 2`] = `
"{
    \\"micheline\\": \\"{ PUSH nat 1; SWAP; COMPARE; GE; IF { PUSH string \\\\\\"YES\\\\\\" } { PUSH string \\\\\\"NO\\\\\\" } }\\",
    \\"json\\": [
        {
            \\"prim\\": \\"PUSH\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"nat\\"
                },
                {
                    \\"int\\": \\"1\\"
                }
            ]
        },
        {
            \\"prim\\": \\"SWAP\\"
        },
        {
            \\"prim\\": \\"COMPARE\\"
        },
        {
            \\"prim\\": \\"GE\\"
        },
        {
            \\"prim\\": \\"IF\\",
            \\"args\\": [
                [
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"string\\"
                            },
                            {
                                \\"string\\": \\"YES\\"
                            }
                        ]
                    }
                ],
                [
                    {
                        \\"prim\\": \\"PUSH\\",
                        \\"args\\": [
                            {
                                \\"prim\\": \\"string\\"
                            },
                            {
                                \\"string\\": \\"NO\\"
                            }
                        ]
                    }
                ]
            ]
        }
    ]
}"
`;

exports[`Compile Values A Lambda that returns the argument 1`] = `"(lambda 1 None False \\"lambda_arg\\" (\\"Compilation.test.ts\\" 28) ((ifBlock (eq (lambdaParams 1 \\"lambda_arg\\" (\\"Compilation.test.ts\\" 28) (unknown 0)) (literal (string \\"TEST\\") (\\"Compilation.test.ts\\" 28)) (\\"Compilation.test.ts\\" 28)) ((result (lambdaParams 1 \\"lambda_arg\\" (\\"Compilation.test.ts\\" 28) (unknown 0)) (\\"Compilation.test.ts\\" 28))) (\\"Compilation.test.ts\\" 28)) (elseBlock ((failwith (lambdaParams 1 \\"lambda_arg\\" (\\"Compilation.test.ts\\" 28) (unknown 0)) (\\"Compilation.test.ts\\" 28))))))"`;

exports[`Compile Values A Lambda that returns the argument 2`] = `
"{
    \\"micheline\\": \\"{ DUP; PUSH string \\\\\\"TEST\\\\\\"; COMPARE; EQ; IF {} { FAILWITH } }\\",
    \\"json\\": [
        {
            \\"prim\\": \\"DUP\\"
        },
        {
            \\"prim\\": \\"PUSH\\",
            \\"args\\": [
                {
                    \\"prim\\": \\"string\\"
                },
                {
                    \\"string\\": \\"TEST\\"
                }
            ]
        },
        {
            \\"prim\\": \\"COMPARE\\"
        },
        {
            \\"prim\\": \\"EQ\\"
        },
        {
            \\"prim\\": \\"IF\\",
            \\"args\\": [
                [],
                [
                    {
                        \\"prim\\": \\"FAILWITH\\"
                    }
                ]
            ]
        }
    ]
}"
`;

exports[`Compile Values Nat 1`] = `"(literal (nat 1) (\\"Compilation.test.ts\\" 46))"`;

exports[`Compile Values Nat 2`] = `
"{
    \\"micheline\\": \\"1\\",
    \\"json\\": {
        \\"int\\": \\"1\\"
    }
}"
`;
