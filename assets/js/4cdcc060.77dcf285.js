"use strict";(self.webpackChunksmartts_sdk_docs=self.webpackChunksmartts_sdk_docs||[]).push([[457],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,h=m["".concat(i,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(h,s(s({ref:t},p),{},{components:n})):r.createElement(h,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3074:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],l={},i="Comparison",c={unversionedId:"expressions/comparison",id:"expressions/comparison",title:"Comparison",description:"LessThan",source:"@site/docs/expressions/comparison.md",sourceDirName:"expressions",slug:"/expressions/comparison",permalink:"/smartts-sdk/expressions/comparison",editUrl:"https://github.com/RomarQ/smartts-sdk/tree/main/documentation/docs/expressions/comparison.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"BLS12-381",permalink:"/smartts-sdk/expressions/bls12_381"},next:{title:"Contract",permalink:"/smartts-sdk/expressions/contract"}},p=[{value:"LessThan",id:"lessthan",children:[],level:2},{value:"LessThanOrEqual",id:"lessthanorequal",children:[],level:2},{value:"GreaterThan",id:"greaterthan",children:[],level:2},{value:"LessThanOrEqual",id:"lessthanorequal-1",children:[],level:2}],u={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"comparison"},"Comparison"),(0,o.kt)("h2",{id:"lessthan"},"LessThan"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#LessThan-1"},"TypeDoc"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const { Contract, EntryPoint, SetValue, ContractStorage, LessThan, TBool, TNat, Nat } = require('@tezwell/smartts-sdk');\n\nconst contract = new Contract()\n    .setStorageType(TBool())\n    .addEntrypoint(\n        new EntryPoint('ep1')\n            .setInputType(TNat())\n            .code((arg) => [\n                SetValue(ContractStorage(), LessThan(arg, Nat(1)))\n            ]),\n    );\n")),(0,o.kt)("h2",{id:"lessthanorequal"},"LessThanOrEqual"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#LessThanOrEqual-1"},"TypeDoc"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const { Contract, EntryPoint, SetValue, ContractStorage, LessThanOrEqual, TBool, TNat, Nat } = require('@tezwell/smartts-sdk');\n\nconst contract = new Contract()\n    .setStorageType(TBool())\n    .addEntrypoint(\n        new EntryPoint('ep1')\n            .setInputType(TNat())\n            .code((arg) => [\n                SetValue(ContractStorage(), LessThanOrEqual(arg, Nat(1)))\n            ]),\n    );\n")),(0,o.kt)("h2",{id:"greaterthan"},"GreaterThan"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#GreaterThan-1"},"TypeDoc"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const { Contract, EntryPoint, SetValue, ContractStorage, GreaterThan, TBool, TNat, Nat } = require('@tezwell/smartts-sdk');\n\nconst contract = new Contract()\n    .setStorageType(TBool())\n    .addEntrypoint(\n        new EntryPoint('ep1')\n            .setInputType(TNat())\n            .code((arg) => [\n                SetValue(ContractStorage(), GreaterThan(arg, Nat(1)))\n            ]),\n    );\n")),(0,o.kt)("h2",{id:"lessthanorequal-1"},"LessThanOrEqual"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#LessThanOrEqual-1"},"TypeDoc"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const { Contract, EntryPoint, SetValue, ContractStorage, LessThanOrEqual, TBool, TNat, Nat } = require('@tezwell/smartts-sdk');\n\nconst contract = new Contract()\n    .setStorageType(TBool())\n    .addEntrypoint(\n        new EntryPoint('ep1')\n            .setInputType(TNat())\n            .code((arg) => [\n                SetValue(ContractStorage(), LessThanOrEqual(arg, Nat(1)))\n            ]),\n    );\n")))}m.isMDXComponent=!0}}]);