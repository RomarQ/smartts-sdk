"use strict";(self.webpackChunksmartts_sdk_docs=self.webpackChunksmartts_sdk_docs||[]).push([[801],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),u=r,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return t?a.createElement(g,i(i({ref:n},p),{},{components:t})):a.createElement(g,i({ref:n},p))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},564:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],s={},l="FA2",c={unversionedId:"contracts/fa2",id:"contracts/fa2",title:"FA2",description:"The contract described in this document is an implementation of TZIP-12 also known as FA2.",source:"@site/docs/contracts/fa2.md",sourceDirName:"contracts",slug:"/contracts/fa2",permalink:"/smartts-sdk/contracts/fa2",editUrl:"https://github.com/RomarQ/smartts-sdk/tree/main/documentation/docs/contracts/fa2.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Declaring variables",permalink:"/smartts-sdk/statements/variables"}},p=[{value:"Contract Structure",id:"contract-structure",children:[{value:"Storage type",id:"storage-type",children:[],level:3},{value:"Entry points",id:"entry-points",children:[],level:3},{value:"On-chain Views",id:"on-chain-views",children:[],level:3}],level:2},{value:"Contract Customization",id:"contract-customization",children:[{value:"Override/Add a new entry point",id:"overrideadd-a-new-entry-point",children:[],level:3},{value:"Remove an entry point",id:"remove-an-entry-point",children:[],level:3},{value:"Override/Add a new on-chain view",id:"overrideadd-a-new-on-chain-view",children:[],level:3},{value:"Remove an on-chain view",id:"remove-an-on-chain-view",children:[],level:3}],level:2},{value:"Build the contract initial storage",id:"build-the-contract-initial-storage",children:[],level:2},{value:"Full example with taquito",id:"full-example-with-taquito",children:[{value:"Install dependencies",id:"install-dependencies",children:[],level:3},{value:"Compile and originate contract",id:"compile-and-originate-contract",children:[],level:3}],level:2},{value:"Full example with ConseilJS",id:"full-example-with-conseiljs",children:[{value:"Install dependencies",id:"install-dependencies-1",children:[],level:3},{value:"Compile and originate contract",id:"compile-and-originate-contract-1",children:[],level:3}],level:2}],d={toc:p};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"fa2"},"FA2"),(0,o.kt)("p",null,"The contract described in this document is an implementation of ",(0,o.kt)("a",{parentName:"p",href:"https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-12/tzip-12.md"},(0,o.kt)("inlineCode",{parentName:"a"},"TZIP-12"))," also known as ",(0,o.kt)("inlineCode",{parentName:"p"},"FA2"),"."),(0,o.kt)("p",null,"The contract source code can be found at: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/RomarQ/smartts-sdk/blob/main/src/contracts/fa2.ts"},"Github (RomarQ/smartts-sdk)")),(0,o.kt)("h2",{id:"contract-structure"},"Contract Structure"),(0,o.kt)("h3",{id:"storage-type"},"Storage type"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"config",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"administrator"),(0,o.kt)("li",{parentName:"ul"},"paused"))),(0,o.kt)("li",{parentName:"ul"},"assets",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"ledger"),(0,o.kt)("li",{parentName:"ul"},"operators"),(0,o.kt)("li",{parentName:"ul"},"token_metadata"),(0,o.kt)("li",{parentName:"ul"},"token_total_supply"))),(0,o.kt)("li",{parentName:"ul"},"metadata")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"TRecord(\n    {\n        config: TRecord(\n            {\n                administrator: TAddress(),\n                paused: TBool(),\n            },\n            // Uses right combs by default\n        ),\n        assets: TRecord(\n            {\n                ledger: TBig_map(\n                    TPair(TAddress(), TNat()),\n                    TRecord(\n                        {\n                            balance: TNat(),\n                        },\n                        // Uses right combs by default\n                    )\n                ),\n                operators: TBig_map(\n                    TRecord(\n                        {\n                            owner: TAddress(),\n                            operator: TAddress(),\n                            token_id: TNat(),\n                        },\n                        ['owner', ['operator', 'token_id']],\n                    ),\n                    TUnit()\n                ),\n                token_metadata: TBig_map(\n                    TNat(),\n                    TRecord(\n                        {\n                            token_id: TNat(),\n                            token_info: TMap(TString(), TBytes()),\n                        },\n                        // Uses right combs by default\n                    )\n                ),\n                token_total_supply: TBig_map(TNat(), TNat()),\n            },\n            // Uses right combs by default\n        ),\n        metadata: TBig_map(TString(), TBytes()),\n    },\n    // Uses right combs by default\n);\n\n// Micheline\n\n(pair\n    (pair %config\n        (address %administrator)\n        (bool %paused)\n    )\n    (pair\n        (pair %assets\n            (big_map %ledger (pair address nat) nat)\n            (pair\n                (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit)\n                (pair\n                    (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))\n                    (big_map %token_total_supply nat nat)\n                )\n            )\n        )\n        (big_map %metadata string bytes)\n    )\n)\n")),(0,o.kt)("h3",{id:"entry-points"},"Entry points"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-12/tzip-12.md#transfer"},"transfer")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Argument Type"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"TList(\n    TRecord(\n        {\n            from_: TAddress(),\n            txs: TList(\n                TRecord(\n                    {\n                        to_: TAddress(),\n                        token_id: TNat(),\n                        amount: TNat(),\n                    },\n                    ['to_', ['token_id', 'amount']],\n                ),\n            ),\n        },\n        ['from_', 'txs'],\n    ),\n)\n\n// Micheline\n\n(list %transfer\n  (pair\n    (address %from_)\n    (list %txs\n      (pair\n        (address %to_)\n        (pair\n          (nat %token_id)\n          (nat %amount)\n        )\n      )\n    )\n  )\n)\n"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-12/tzip-12.md#update_operators"},"update_operators")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Argument Type"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"TList(\n    TVariant(\n        {\n            add_operator: FA2_Types.OperatorKey,\n            remove_operator: FA2_Types.OperatorKey,\n        },\n        ['add_operator', 'remove_operator'],\n    ),\n)\n\n// Micheline\n\n(list %update_operators\n  (or\n    (pair %add_operator\n      (address %owner)\n      (pair\n        (address %operator)\n        (nat %token_id)\n      )\n    )\n    (pair %remove_operator\n      (address %owner)\n      (pair\n        (address %operator)\n        (nat %token_id)\n      )\n    )\n  )\n)\n"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-12/tzip-12.md#balance_of"},"balance_of")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Argument Type"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"TRecord(\n    {\n        requests: TList(\n            TRecord(\n                {\n                    owner: TAddress(),\n                    token_id: TNat(),\n                },\n                ['owner', 'token_id'],\n            ),\n        ),\n        callback: TContract(\n            TList(\n                TRecord(\n                    {\n                        request: TRecord(\n                            {\n                                owner: TAddress(),\n                                token_id: TNat(),\n                            },\n                            ['owner', 'token_id'],\n                        ),\n                        balance: TNat(),\n                    },\n                    ['request', 'balance'],\n                ),\n            ),\n        ),\n    },\n    ['requests', 'callback'],\n)\n\n// Micheline\n\n(pair %balance_of\n  (list %requests\n    (pair\n      (address %owner)\n      (nat %token_id)\n    )\n  )\n  (contract %callback\n    (list\n      (pair\n        (pair %request\n          (address %owner)\n          (nat %token_id)\n        )\n        (nat %balance)\n      )\n    )\n  )\n)\n"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"mint"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Argument type"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"TRecord(\n    {\n        address: TAddress(),\n        amount: TNat(),\n        token_id: TNat(),\n    },\n    // Uses right combs by default\n)\n\n// Micheline\n\n(pair %mint (address %address) (pair (nat %amount) (nat %token_id)))\n"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"pause"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Argument type"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"TBool()\n\n// Micheline\n\n(bool %pause)\n"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"set_admin"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Argument type"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"TAddress()\n\n// Micheline\n\n(address %set_admin)\n"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"update_metadata"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Argument type"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"TMap(TString(), TBytes())\n\n// Micheline\n\n(map %update_metadata string bytes)\n")))))),(0,o.kt)("h3",{id:"on-chain-views"},"On-chain Views"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"balance_of"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Argument Type"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"TList(\n    TRecord(\n        {\n            owner: TAddress(),\n            token_id: TNat(),\n        },\n        ['owner', 'token_id'],\n    ),\n)\n\n// Micheline\n\n(list\n    (pair\n      (address %owner)\n      (nat %token_id)\n    )\n)\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Output type"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"TList(\n    TRecord(\n        {\n            request: TRecord(\n                {\n                    owner: TAddress(),\n                    token_id: TNat(),\n                },\n                ['owner', 'token_id'],\n            ),\n            balance: TNat(),\n        },\n        ['request', 'balance'],\n    ),\n)\n\n// Micheline\n\n(list\n    (pair\n        (nat %balance)\n        (pair %request\n            (address %owner)\n            (nat %token_id)\n        )\n    )\n)\n")))))),(0,o.kt)("h2",{id:"contract-customization"},"Contract Customization"),(0,o.kt)("p",null,"The contract is customizable. Users can update/add/remove any entry points or views, including changing the storage type."),(0,o.kt)("h3",{id:"overrideadd-a-new-entry-point"},"Override/Add a new entry point"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const {\n    EntryPoint,\n    NewVariable,\n    SetValue,\n    AccessMapByKey,\n    GetVariable,\n    ContractStorage,\n    Pair,\n    Record,\n    Nat,\n    Add\n} = require(\"@tezwell/smartts-sdk\");\nconst Compiler = require(\"@tezwell/smartts-sdk/compiler\");\n\nconst { FA2_Contract, FA2_Type, FA2_Utils } = require(\"@tezwell/smartts-sdk/contracts/fa2\");\n\nconst contract = FA2_Contract.addEntrypoint(\n    new EntryPoint('mint')\n        .setInputType(FA2_Type.Entrypoint.Mint)\n        .code((entrypoint_arg) => [\n            // Sender must be the administrator\n            FA2_Utils.FailIfSenderIsNotAdmin(),\n            // Create the ledger key\n            NewVariable('ledger_key', Pair(entrypoint_arg.address, entrypoint_arg.token_id)),\n            // Get the current ledger balance\n            NewVariable(\n                'balance',\n                AccessMapByKey(ContractStorage().assets.ledger, GetVariable('ledger_key'), Record({ balance: Nat(0) }))\n                    .balance,\n            ),\n            // Update ledger balance\n            SetValue(\n                AccessMapByKey(ContractStorage().assets.ledger, GetVariable('ledger_key')),\n                Record({ balance: Add(GetVariable('balance'), entrypoint_arg.amount) }),\n            ),\n        ])\n);\n\nconst contractJSON = Compiler.compileContract(contract).json;\n")),(0,o.kt)("h3",{id:"remove-an-entry-point"},"Remove an entry point"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const Compiler = require("@tezwell/smartts-sdk/compiler");\nconst { FA2_Contract } = require("@tezwell/smartts-sdk/contracts/fa2");\n\nconst contract = FA2_Contract.removeEntrypoint("mint");\n\nconst contractJSON = Compiler.compileContract(contract).json;\n')),(0,o.kt)("h3",{id:"overrideadd-a-new-on-chain-view"},"Override/Add a new on-chain view"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const {\n    OnChainView,\n    NewVariable,\n    ForEachOf,\n    SetValue,\n    Return,\n    Require,\n    MapContainsKey,\n    AccessMapByKey,\n    GetVariable,\n    AsType,\n    PrependToList,\n    ContractStorage,\n    Pair,\n    List,\n    Record,\n    Nat,\n    String\n} = require(\"@tezwell/smartts-sdk\");\nconst Compiler = require(\"@tezwell/smartts-sdk/compiler\");\nconst { FA2_Contract, FA2_Type, FA2_Error, FA2_Utils } = require(\"@tezwell/smartts-sdk/contracts/fa2\");\n\nconst contract = FA2_Contract.addView(\n    new OnChainView('balance_of')\n        .setInputType(FA2_Type.Entrypoint.BalanceOf)\n        .code((argument) => [\n                // Fail if contract is paused\n                FA2_Utils.FailIfContractIsPaused(),\n                // Iterate over each request and compute result\n            NewVariable('responses', AsType(List([]), FA2_Type.View.BalanceOf.Output)),\n                ForEachOf(argument.requests).Do((request) => [\n                    // Fail if the token does not exist\n                    Require(\n                        MapContainsKey(ContractStorage().assets.token_total_supply, request.token_id),\n                        String(FA2_Error.TOKEN_UNDEFINED),\n                    ),\n                    SetValue(\n                        GetVariable('responses'),\n                        PrependToList(\n                            GetVariable('responses'),\n                            Record({\n                                request,\n                                balance: AccessMapByKey(\n                                    ContractStorage().assets.ledger,\n                                    Pair(request.owner, request.token_id),\n                                    Record({ balance: Nat(0) }),\n                                ).balance,\n                            }),\n                        ),\n                    ),\n                ]),\n                // Return response\n                Return(GetVariable('responses')),\n        ])\n);\n\nconst contractJSON = Compiler.compileContract(contract).json;\n")),(0,o.kt)("h3",{id:"remove-an-on-chain-view"},"Remove an on-chain view"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const Compiler = require("@tezwell/smartts-sdk/compiler");\nconst { FA2_Contract } = require("@tezwell/smartts-sdk/contracts/fa2");\n\nconst contract = FA2_Contract.removeView("balance_of");\n\nconst contractJSON = Compiler.compileContract(contract).json;\n')),(0,o.kt)("h2",{id:"build-the-contract-initial-storage"},"Build the contract initial storage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @tezwell/michelson-sdk\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const { Record, Address, Bool, Big_map } = require('@tezwell/michelson-sdk');\n\nconst storageJSON = Record({\n    config: Record({\n        administrator: Address(\"tz1aBNXcSKfWE7aujp2Twa7V7Beua2fjhri3\"),\n        paused: Bool(false),\n    }),\n    assets: Record({\n        ledger: Big_map(),\n        operators: Big_map(),\n        token_metadata: Big_map(),\n        token_total_supply: Big_map(),\n    }),\n    metadata: Big_map(),\n}).toJSON();\n")),(0,o.kt)("h2",{id:"full-example-with-taquito"},"Full example with taquito"),(0,o.kt)("h3",{id:"install-dependencies"},"Install dependencies"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @tezwell/smartts-sdk @tezwell/michelson-sdk @taquito/taquito @taquito/signer\n")),(0,o.kt)("h3",{id:"compile-and-originate-contract"},"Compile and originate contract"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const { TezosToolkit } = require('@taquito/taquito');\nconst { InMemorySigner } = require('@taquito/signer');\n\nconst { Record, Address, Bool, Big_map } = require('@tezwell/michelson-sdk');\nconst { FA2_Contract } = require(\"@tezwell/smartts-sdk/contracts/fa2\");\nconst Compiler = require(\"@tezwell/smartts-sdk/compiler\");\n\n// Compile the contract and the initial storage\nconst compiledContract = Compiler.compileContract(FA2_Contract).json;\nconst compiledStorage = Record({\n    config: Record({\n        administrator: Address(\"tz1aBNXcSKfWE7aujp2Twa7V7Beua2fjhri3\"),\n        paused: Bool(false),\n    }),\n    assets: Record({\n        ledger: Big_map(),\n        operators: Big_map(),\n        token_metadata: Big_map(),\n        token_total_supply: Big_map(),\n    }),\n    metadata: Big_map(),\n}).toJSON();\n\nconst Tezos = new TezosToolkit('https://ithacanet.visualtez.com');\nTezos.setProvider({\n  signer: new InMemorySigner('edskS83aZUK3ijLrW5tTs1sDY3qLjSsMGyebKKLWP4RXSBh4LCivG2s1TezyZB5rEvvdqepXMg1MLcfBhS8VSJESN7L27hDpsX')\n});\n\n// Originate contract\nTezos.contract.originate({\n    code: compiledContract,\n    init: compiledStorage,\n})\n.then((op) => {\n    console.log(`Waiting for ${op.hash} to be confirmed...`);\n    return op.confirmation(1).then(() => op.contractAddress);\n})\n.then((contractAddress) => console.log(\"Contract originated:\", contractAddress))\n.catch((error) => console.log(error));\n")),(0,o.kt)("h2",{id:"full-example-with-conseiljs"},"Full example with ConseilJS"),(0,o.kt)("h3",{id:"install-dependencies-1"},"Install dependencies"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @tezwell/smartts-sdk @tezwell/michelson-sdk conseiljs conseiljs-softsigner node-fetch@2 loglevel\n")),(0,o.kt)("h3",{id:"compile-and-originate-contract-1"},"Compile and originate contract"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const fetch = require('node-fetch');\nconst log = require('loglevel');\n\nconst { registerFetch, registerLogger, TezosMessageUtils, TezosParameterFormat, TezosNodeWriter } = require('conseiljs');\nconst { KeyStoreUtils, SoftSigner } = require('conseiljs-softsigner');\n\nconst { Record, Address, Bool, Big_map } = require('@tezwell/michelson-sdk');\nconst { FA2_Contract } = require(\"@tezwell/smartts-sdk/contracts/fa2\");\nconst Compiler = require(\"@tezwell/smartts-sdk/compiler\");\n\n// Compile the contract and the initial storage\nconst compiledContract = Compiler.compileContract(FA2_Contract).json;\nconst compiledStorage = Record({\n    config: Record({\n        administrator: Address(\"tz1aBNXcSKfWE7aujp2Twa7V7Beua2fjhri3\"),\n        paused: Bool(false),\n    }),\n    assets: Record({\n        ledger: Big_map(),\n        operators: Big_map(),\n        token_metadata: Big_map(),\n        token_total_supply: Big_map(),\n    }),\n    metadata: Big_map(),\n}).toJSON();\n\nconst logger = log.getLogger('conseiljs');\nlogger.setLevel('debug', false); // to see only errors, set to 'error'\nregisterLogger(logger);\nregisterFetch(fetch);\n\nconst RPC = 'https://ithacanet.visualtez.com';\n\n(async () => {\n    const keyStore = await KeyStoreUtils.restoreIdentityFromSecretKey('edskS83aZUK3ijLrW5tTs1sDY3qLjSsMGyebKKLWP4RXSBh4LCivG2s1TezyZB5rEvvdqepXMg1MLcfBhS8VSJESN7L27hDpsX');\n    const signer = await SoftSigner.createSigner(TezosMessageUtils.writeKeyWithHint(keyStore.secretKey, 'edsk'), -1);\n\n\n    const result = await TezosNodeWriter.sendContractOriginationOperation(\n        RPC,\n        signer,\n        keyStore,\n        0,\n        undefined,\n        100_000,\n        32_000,\n        100_000,\n        JSON.stringify(compiledContract),\n        JSON.stringify(compiledStorage),\n        TezosParameterFormat.Micheline\n    );\n\n    console.log(\"Contract originated:\", result.results.contents[0].metadata.operation_result.originated_contracts[0]);\n})();\n")))}m.isMDXComponent=!0}}]);