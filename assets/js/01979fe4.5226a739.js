"use strict";(self.webpackChunksmartts_sdk_docs=self.webpackChunksmartts_sdk_docs||[]).push([[341],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var i=r.createContext({}),c=function(t){var e=r.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},u=function(t){var e=c(t.components);return r.createElement(i.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,i=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(i,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(f,s(s({ref:e},u),{},{components:n})):r.createElement(f,s({ref:e},u))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var i in e)hasOwnProperty.call(e,i)&&(l[i]=e[i]);l.originalType=t,l.mdxType="string"==typeof t?t:a,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2778:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],l={},i="Loop Controls",c={unversionedId:"statements/loops",id:"statements/loops",title:"Loop Controls",description:"For",source:"@site/docs/statements/loops.md",sourceDirName:"statements",slug:"/statements/loops",permalink:"/smartts-sdk/statements/loops",editUrl:"https://github.com/RomarQ/smartts-sdk/tree/main/documentation/docs/statements/loops.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Conditional Controls",permalink:"/smartts-sdk/statements/conditionals"},next:{title:"Return values (Views/Lambdas)",permalink:"/smartts-sdk/statements/return"}},u=[{value:"For",id:"for",children:[],level:2},{value:"ForEachOf",id:"foreachof",children:[],level:2},{value:"While",id:"while",children:[],level:2}],p={toc:u};function m(t){var e=t.components,n=(0,a.Z)(t,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"loop-controls"},"Loop Controls"),(0,o.kt)("h2",{id:"for"},"For"),(0,o.kt)("p",null,"The statement ",(0,o.kt)("inlineCode",{parentName:"p"},"For")," lets you repeat a block of statements a specific number of times."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/statement.html#For"},"TypeDoc"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const {\n    Contract,\n    EntryPoint,\n    TUnit,\n    For,\n    NewVariable,\n    SetValue,\n    ContractStorage,\n    GetVariable,\n    List,\n    Nat,\n    PrependToList\n} = require(\'@tezwell/smartts-sdk\');\n\nconst contract = new Contract()\n    // let <contract>.<storage> = [];\n    .setStorage(List([]))\n    .addEntrypoint(\n        new EntryPoint(\'entry_point_1\')\n            .setInputType(TUnit())\n            .code(() => [\n                // let some_list = [];\n                NewVariable("some_list", List([])),\n                // for(let i = 0; i < 3; i=+1) {\n                //   some_list = [...some_list, i];\n                // }\n                For(\n                    Nat(0), /* let i = 0;   */\n                    Nat(3), /* i < 3;       */\n                    Nat(1)  /* i =+ 1       */\n                ).Do((i) => [\n                    SetValue(GetVariable("some_list"), PrependToList(GetVariable("some_list"), i))\n                ]),\n                // <contract>.<storage> = some_list;\n                SetValue(ContractStorage(), GetVariable("some_list"))\n            ])\n    );\n')),(0,o.kt)("h2",{id:"foreachof"},"ForEachOf"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ForEachOf")," lets you iterate over all elements of a ",(0,o.kt)("inlineCode",{parentName:"p"},"TList(...)")," and apply a given block of statements on every iteration."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/statement.html#ForEachOf"},"TypeDoc"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const {\n    Contract,\n    EntryPoint,\n    ContractStorage,\n    ForEachOf,\n    NewVariable,\n    SetValue,\n    Add,\n    PrependToList,\n    GetVariable,\n    TUnit,\n    List,\n    Nat\n} = require(\'@tezwell/smartts-sdk\');\n\nconst contract = new Contract()\n    // let <contract>.<storage> = [1, 2, 3];\n    .setStorage(List([Nat(1), Nat(2), Nat(3)]))\n    .addEntrypoint(\n        new EntryPoint(\'entry_point_1\')\n            .setInputType(TUnit())\n            .code(() => [\n                // let sum = 0;\n                NewVariable("sum", Nat(0)),\n                // <contract>.<storage>.forEach((el) => {\n                //   sum += el;\n                // })\n                ForEachOf(ContractStorage()).Do((el) => [\n                    SetValue(GetVariable("sum"), Add(GetVariable("sum"), el))\n                ]),\n                // <contract>.<storage> = [...<contract>.<storage>, sum];\n                SetValue(ContractStorage(), PrependToList(ContractStorage(), GetVariable("sum")))\n            ])\n    );\n')),(0,o.kt)("h2",{id:"while"},"While"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"While")," statement lets you repeat a block of statements while a given condition evaluates to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/statement.html#While"},"TypeDoc"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const {\n    Contract,\n    EntryPoint,\n    While,\n    SetValue,\n    Add,\n    LessThanOrEqual,\n    ContractStorage,\n    Nat,\n    TNat,\n} = require('@tezwell/smartts-sdk');\n\nconst contract = new Contract()\n    // let <contract>.<storage> = 0;\n    .setStorage(Nat(0))\n    .addEntrypoint(\n        new EntryPoint('entry_point_1')\n            .setInputType(TNat())\n            .code((argument) => [\n                // while (<contract>.<storage> <= argument) {\n                //   <contract>.<storage> += 1;\n                // }\n                While(LessThanOrEqual(ContractStorage(), argument)).Do([\n                    SetValue(ContractStorage(), Add(ContractStorage(), Nat(1))),\n                ]),\n            ]),\n    );\n")))}m.isMDXComponent=!0}}]);