"use strict";(self.webpackChunksmartts_sdk_docs=self.webpackChunksmartts_sdk_docs||[]).push([[939],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4326:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],c={},l="On-Chain Views",s={unversionedId:"contract_api/views",id:"contract_api/views",title:"On-Chain Views",description:"Define an on-chain view",source:"@site/docs/contract_api/views.md",sourceDirName:"contract_api",slug:"/contract_api/views",permalink:"/smartts-sdk/contract_api/views",editUrl:"https://github.com/RomarQ/smartts-sdk/tree/main/documentation/docs/contract_api/views.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Initial Storage",permalink:"/smartts-sdk/contract_api/initial_storage"},next:{title:"Literal Expressions",permalink:"/smartts-sdk/literals"}},u=[{value:"Define an on-chain view",id:"define-an-on-chain-view",children:[],level:2},{value:"Call an on-chain view",id:"call-an-on-chain-view",children:[{value:"Usage",id:"usage",children:[],level:4}],level:2}],p={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"on-chain-views"},"On-Chain Views"),(0,i.kt)("h2",{id:"define-an-on-chain-view"},"Define an on-chain view"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/classes/core.OnChainView.html"},"TypeDoc"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const {\n    Contract,\n    CallView,\n    OnChainView,\n    TBool,\n    TNat,\n    Return,\n    Nat,\n} = require('@tezwell/smartts-sdk');\n\nconst contract = new Contract()\n    // Add an on-chain view named \"convert\"\n    .addView(\n        new OnChainView('convert')\n            .setInputType(TBool())\n            .code((argument) => [\n                // Convert a boolean value to a nat value\n                If(argument)\n                    .Then([Return(Nat(1))])\n                    .Else([Return(Nat(0))]),\n            ]),\n    );\n")),(0,i.kt)("h2",{id:"call-an-on-chain-view"},"Call an on-chain view"),(0,i.kt)("p",null,"Calls an on-chain view and returns an expression of type ",(0,i.kt)("inlineCode",{parentName:"p"},"TOption(<any>)"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#CallView"},"TypeDoc"))),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const {\n    Contract,\n    EntryPoint,\n    TOption,\n    TBool,\n    TNat,\n    ContractStorage,\n    CallView,\n    SetValue,\n    Return,\n} = require('@tezwell/smartts-sdk');\n\nconst contract = new Contract()\n    .setStorageType(TOption(TNat()))\n    .addEntrypoint(\n        new EntryPoint('entry_point_1')\n            .setInputType(TBool())\n            .code((arg) => [\n                SetValue(ContractStorage(), CallView('convert', Address(\"\"), arg, TNat())),\n            ]),\n    );\n")))}d.isMDXComponent=!0}}]);