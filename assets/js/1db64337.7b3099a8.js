"use strict";(self.webpackChunksmartts_sdk_docs=self.webpackChunksmartts_sdk_docs||[]).push([[372],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=a,g=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6777:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:1,slug:"/"},l="Overview",c={unversionedId:"overview",id:"overview",title:"Overview",description:"CI",source:"@site/docs/overview.md",sourceDirName:".",slug:"/",permalink:"/smartts-sdk/",editUrl:"https://github.com/RomarQ/smartts-sdk/tree/main/documentation/docs/overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/"},sidebar:"sidebar",next:{title:"Entry Points",permalink:"/smartts-sdk/contract_api/entrypoint"}},p=[{value:"API Documentation (TypeDoc)",id:"api-documentation-typedoc",children:[],level:2},{value:"Getting Started",id:"getting-started",children:[{value:"Install the package",id:"install-the-package",children:[],level:3},{value:"Use the package",id:"use-the-package",children:[{value:"Build and compile a contract",id:"build-and-compile-a-contract",children:[],level:4},{value:"Build and compile a lambda",id:"build-and-compile-a-lambda",children:[],level:4}],level:3}],level:2}],m={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"overview"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://github.com/RomarQ/smartts-sdk/workflows/CI/badge.svg",alt:"CI"}),"\n",(0,i.kt)("img",{parentName:"p",src:"https://coveralls.io/repos/github/RomarQ/smartts-sdk/badge.svg?branch=main",alt:"Coverage Status"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"SmartTS SDK"))," is a metaprogramming framework for building Tezos smart contracts from Javascript. It uses the SmartPy compiler."),(0,i.kt)("h2",{id:"api-documentation-typedoc"},(0,i.kt)("a",{parentName:"h2",href:"https://romarq.github.io/smartts-sdk/api"},"API Documentation (TypeDoc)")),(0,i.kt)("h2",{id:"getting-started"},"Getting Started"),(0,i.kt)("h3",{id:"install-the-package"},"Install the package"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @tezwell/smartts-sdk\n")),(0,i.kt)("h3",{id:"use-the-package"},"Use the package"),(0,i.kt)("h4",{id:"build-and-compile-a-contract"},"Build and compile a contract"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { Equal, Contract, EntryPoint,GetSender, NewVariable, Require, SetValue, TNat, ContractStorage, GetVariable, Address, Nat, String } = require('@tezwell/smartts-sdk');\nconst SmartML = require('@tezwell/smartts-sdk/compiler');\n\nconst contract = new Contract()\n    .setStorage(Nat(0))\n    .addEntrypoint(\n        new EntryPoint('ep1').setInputType(TNat()).code((arg) => [\n            // Define a variable named \"an_address\"\n            NewVariable('an_address', Address('KT1R9M3MDffw7qSVSnbJs46aMC9YzzZz3aGT')),\n            // Require sender to be equal to variable \"an_address\", otherwise fail with \"Not Admin!\"\n            Require(Equal(GetVariable('an_address'), GetSender()), String('Not Admin!')),\n            // Replace the storage value with entry point argument\n            SetValue(ContractStorage(), arg),\n        ]),\n    );\n\nSmartML.compileContract(contract);\n// Result:\n//    {\n//        micheline: 'parameter ...; storage ...; code { ... };',\n//        json: [\n//          { prim: 'storage', args: [...] },\n//          { prim: 'parameter', args: [...] },\n//          { prim: 'code', args: [...] },\n//        ]\n//    }\n")),(0,i.kt)("h4",{id:"build-and-compile-a-lambda"},"Build and compile a lambda"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const { Comparison, Lambda, If, Return, String, Nat } = require(\'@tezwell/smartts-sdk\');\nconst SmartML = require(\'@tezwell/smartts-sdk/compiler\');\n\n// A Lambda that returns "YES" if the argument is greater than or equal to Nat(10), returns "NO" otherwise.\nconst lambda = Lambda()\n    .code((arg) => [\n        If(Comparison.GreaterThanOrEqual(arg, Nat(10)))\n            .Then([Return(String(\'YES\'))])\n            .Else([Return(String(\'NO\'))]),\n    ]);\n\nSmartML.compileValue(lambda);\n// Result:\n//    {\n//        micheline: \'{ PUSH nat 1; SWAP; COMPARE; GE; IF { PUSH string "YES" } { PUSH string "NO" } }\',\n//        json: [\n//            {\n//                prim: "PUSH",\n//                args: [\n//                    {\n//                        prim: "nat"\n//                    },\n//                    {\n//                        int: "10"\n//                    }\n//                ]\n//            },\n//            {\n//                prim: "SWAP"\n//            },\n//            {\n//                prim: "COMPARE"\n//            },\n//            {\n//                prim: "GE"\n//            },\n//            {\n//                prim: "IF",\n//                args: [\n//                    [\n//                        {\n//                            prim: "PUSH",\n//                            args: [\n//                                {\n//                                    prim: "string"\n//                                },\n//                                {\n//                                    string: "YES"\n//                                }\n//                            ]\n//                        }\n//                    ],\n//                    [\n//                        {\n//                            prim: "PUSH",\n//                            args: [\n//                                {\n//                                    prim: "string"\n//                                },\n//                                {\n//                                    string: "NO"\n//                                }\n//                            ]\n//                        }\n//                    ]\n//                ]\n//            }\n//        ]\n//    }\n')))}d.isMDXComponent=!0}}]);