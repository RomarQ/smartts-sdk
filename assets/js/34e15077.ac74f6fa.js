"use strict";(self.webpackChunksmartts_sdk_docs=self.webpackChunksmartts_sdk_docs||[]).push([[611],{3905:function(t,e,n){n.d(e,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=r.createContext({}),p=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},c=function(t){var e=p(t.components);return r.createElement(l.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,l=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),d=p(n),m=a,y=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(y,i(i({ref:e},c),{},{components:n})):r.createElement(y,i({ref:e},c))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6395:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={},l="Integer",p={unversionedId:"expressions/integer",id:"expressions/integer",title:"Integer",description:"Type convertion",source:"@site/docs/expressions/integer.md",sourceDirName:"expressions",slug:"/expressions/integer",permalink:"/smartts-sdk/expressions/integer",editUrl:"https://github.com/RomarQ/smartts-sdk/tree/main/documentation/docs/expressions/integer.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Equality",permalink:"/smartts-sdk/expressions/equality"},next:{title:"Lambda",permalink:"/smartts-sdk/expressions/lambda"}},c=[{value:"Type convertion",id:"type-convertion",children:[{value:"CastToNat",id:"casttonat",children:[],level:3},{value:"IsNat",id:"isnat",children:[],level:3},{value:"CastToInt",id:"casttoint",children:[],level:3},{value:"ABS",id:"abs",children:[],level:3}],level:2}],u={toc:c};function d(t){var e=t.components,n=(0,a.Z)(t,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"integer"},"Integer"),(0,o.kt)("h2",{id:"type-convertion"},"Type convertion"),(0,o.kt)("h3",{id:"casttonat"},"CastToNat"),(0,o.kt)("p",null,"Convert a value of type ",(0,o.kt)("inlineCode",{parentName:"p"},"TInt()")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"TNat()"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#CastToNat"},"TypeDoc"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const {\n    Contract,\n    EntryPoint,\n    SetValue,\n    ContractStorage,\n    CastToNat,\n    TInt,\n    TNat,\n    String,\n} = require('@tezwell/smartts-sdk');\n\nconst contract = new Contract()\n    .setStorageType(TNat())\n    .addEntrypoint(\n        new EntryPoint('entry_point_1')\n            .setInputType(TInt())\n            .code((arg) => [\n                SetValue(ContractStorage(), CastToNat(arg, String('Could not convert int to nat'))),\n            ]),\n    );\n")),(0,o.kt)("h3",{id:"isnat"},"IsNat"),(0,o.kt)("p",null,"Convert a value of type ",(0,o.kt)("inlineCode",{parentName:"p"},"TInt()")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"TOption(TNat())"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#IsNat"},"TypeDoc"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const {\n    Contract,\n    EntryPoint,\n    SetValue,\n    ContractStorage,\n    IsNat,\n    GetSome,\n    TInt,\n    TNat,\n    String,\n} = require('@tezwell/smartts-sdk');\n\nconst contract = new Contract()\n    .setStorageType(TNat())\n    .addEntrypoint(\n        new EntryPoint('entry_point_1')\n            .setInputType(TInt())\n            .code((arg) => [\n                SetValue(ContractStorage(), GetSome(IsNat(arg), String('Could not convert int to nat'))),\n            ]),\n    );\n")),(0,o.kt)("h3",{id:"casttoint"},"CastToInt"),(0,o.kt)("p",null,"Convert a value of type ",(0,o.kt)("inlineCode",{parentName:"p"},"TNat()")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"TInt()"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#CastToInt"},"TypeDoc"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const {\n    Contract,\n    EntryPoint,\n    SetValue,\n    ContractStorage,\n    CastToInt,\n    TInt,\n    TNat\n} = require('@tezwell/smartts-sdk');\n\nconst contract = new Contract()\n    .setStorageType(TInt())\n    .addEntrypoint(\n        new EntryPoint('entry_point_1')\n            .setInputType(TNat())\n            .code((arg) => [\n                SetValue(ContractStorage(), CastToInt(arg)),\n            ]),\n    );\n")),(0,o.kt)("h3",{id:"abs"},"ABS"),(0,o.kt)("p",null,"Obtain the absolute value of an ",(0,o.kt)("inlineCode",{parentName:"p"},"TInt()")," value."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#ABS"},"TypeDoc"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const {\n    Contract,\n    EntryPoint,\n    SetValue,\n    ContractStorage,\n    ABS,\n    TInt,\n    TNat\n} = require('@tezwell/smartts-sdk');\n\nconst contract = new Contract()\n    .setStorageType(TNat())\n    .addEntrypoint(\n        new EntryPoint('entry_point_1')\n            .setInputType(TInt())\n            .code((arg) => [\n                SetValue(ContractStorage(), ABS(arg)),\n            ]),\n    );\n")))}d.isMDXComponent=!0}}]);