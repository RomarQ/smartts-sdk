"use strict";(self.webpackChunksmartts_sdk_docs=self.webpackChunksmartts_sdk_docs||[]).push([[330],{3905:function(t,e,n){n.d(e,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var o=r.createContext({}),u=function(t){var e=r.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},c=function(t){var e=u(t.components);return r.createElement(o.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,o=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),d=u(n),m=a,h=d["".concat(o,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(h,l(l({ref:e},c),{},{components:n})):r.createElement(h,l({ref:e},c))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var o in e)hasOwnProperty.call(e,o)&&(s[o]=e[o]);s.originalType=t,s.mdxType="string"==typeof t?t:a,l[1]=s;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3236:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],s={},o="Arithmetic",u={unversionedId:"expressions/arithmetic",id:"expressions/arithmetic",title:"Arithmetic",description:"Addition",source:"@site/docs/expressions/arithmetic.md",sourceDirName:"expressions",slug:"/expressions/arithmetic",permalink:"/smartts-sdk/expressions/arithmetic",editUrl:"https://github.com/RomarQ/smartts-sdk/tree/main/documentation/docs/expressions/arithmetic.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Types",permalink:"/smartts-sdk/types"},next:{title:"BLS12-381",permalink:"/smartts-sdk/expressions/bls12_381"}},c=[{value:"Addition",id:"addition",children:[{value:"Usage",id:"usage",children:[],level:3}],level:2},{value:"Subtraction",id:"subtraction",children:[{value:"Usage",id:"usage-1",children:[],level:3}],level:2},{value:"Multiplication",id:"multiplication",children:[{value:"Usage",id:"usage-2",children:[],level:3}],level:2},{value:"Euclidean Division",id:"euclidean-division",children:[{value:"Division",id:"division",children:[],level:3},{value:"Modulus",id:"modulus",children:[],level:3},{value:"EuclideanDivision",id:"euclideandivision",children:[],level:3}],level:2},{value:"Logical left shift",id:"logical-left-shift",children:[],level:2},{value:"Logical right shift",id:"logical-right-shift",children:[],level:2}],p={toc:c};function d(t){var e=t.components,n=(0,a.Z)(t,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"arithmetic"},"Arithmetic"),(0,i.kt)("h2",{id:"addition"},"Addition"),(0,i.kt)("p",null,"Adds two values."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#Add-1"},"TypeDoc"))),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const {\n    Add,\n    Nat,\n    Int,\n    Timestamp,\n    Mutez,\n    Bls12_381_fr,\n    Bls12_381_g1,\n    Bls12_381_g2,\n} = require(\'@tezwell/smartts-sdk\');\n\nAdd(Nat(1), Nat(1));                                // Nat(2)\n\nAdd(Int(1), Int(1));                                // Int(2)\n\nAdd(Mutez(1), Mutez(1));                            // Mutez(2)\n\nAdd(Bls12_381_fr(1), Bls12_381_fr(1));              // Bls12_381_fr(2)\nAdd(Bls12_381_g1("0x00"), Bls12_381_g1("0x00"));    // Bls12_381_g1("0x00")\nAdd(Bls12_381_g2("0x00"), Bls12_381_g2("0x00"));    // Bls12_381_g2("0x00")\n')),(0,i.kt)("h2",{id:"subtraction"},"Subtraction"),(0,i.kt)("p",null,"Subtract two values."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#Subtract-1"},"TypeDoc"))),(0,i.kt)("h3",{id:"usage-1"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const {\n    Subtract,\n    Nat,\n    Int,\n    Timestamp,\n    Mutez\n} = require('@tezwell/smartts-sdk');\n\nSubtract(Nat(1), Nat(1));               // Int(0)\n\nSubtract(Int(1), Int(1));               // Int(0)\n\nSubtract(Timestamp(1), Timestamp(1));   // Int(0)\n\nSubtract(Mutez(1), Mutez(1));           // Mutez(0)\n")),(0,i.kt)("h2",{id:"multiplication"},"Multiplication"),(0,i.kt)("p",null,"Multiply two values."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#Multiply-1"},"TypeDoc"))),(0,i.kt)("h3",{id:"usage-2"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const {\n    Multiply,\n    Nat,\n    Int,\n    Mutez,\n    Bls12_381_fr,\n    Bls12_381_g1,\n    Bls12_381_g2\n} = require(\'@tezwell/smartts-sdk\');\n\nMultiply(Nat(1), Nat(1));                           // Nat(1)\n\nMultiply(Nat(1), Int(1));                           // Int(1)\n\nMultiply(Int(1), Int(1));                           // Int(1)\n\nMultiply(Mutez(1), Nat(1));                         // Mutez(1)\n\nMultiply(Nat(1), Bls12_381_fr(1));                  // Bls12_381_fr(2)\nMultiply(Int(1), Bls12_381_fr(1));                  // Bls12_381_fr(2)\nMultiply(Bls12_381_fr(1), Bls12_381_fr(1));         // Bls12_381_fr(2)\nMultiply(Bls12_381_g1("0x00"), Bls12_381_fr(0));    // Bls12_381_g1("0x00")\nMultiply(Bls12_381_g2("0x00"), Bls12_381_fr(0));    // Bls12_381_g2("0x00")\n')),(0,i.kt)("h2",{id:"euclidean-division"},"Euclidean Division"),(0,i.kt)("h3",{id:"division"},"Division"),(0,i.kt)("p",null,"Performs the euclidean division and extracts the ",(0,i.kt)("inlineCode",{parentName:"p"},"quotient")," from the result."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#Divide-1"},"TypeDoc"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const {\n    Contract,\n    EntryPoint,\n    SetValue,\n    ContractStorage,\n    Divide,\n    Nat,\n    TNat,\n} = require('@tezwell/smartts-sdk');\n\n\nconst contract = new Contract()\n    .setStorageType(TNat())\n    .addEntrypoint(\n        new EntryPoint('ep1').code(() => [\n            SetValue(ContractStorage(), Divide(Nat(10), Nat(2)))\n        ]),\n    );\n")),(0,i.kt)("h3",{id:"modulus"},"Modulus"),(0,i.kt)("p",null,"Performs the euclidean division and extracts the ",(0,i.kt)("inlineCode",{parentName:"p"},"remainder")," from the result."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#Mod"},"TypeDoc"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const {\n    Contract,\n    EntryPoint,\n    SetValue,\n    ContractStorage,\n    Mod,\n    Nat,\n    TNat,\n} = require('@tezwell/smartts-sdk');\n\n\nconst contract = new Contract()\n    .setStorageType(TNat())\n    .addEntrypoint(\n        new EntryPoint('ep1').code(() => [\n            SetValue(ContractStorage(), Mod(Nat(10), Nat(2)))\n        ]),\n    );\n")),(0,i.kt)("h3",{id:"euclideandivision"},"EuclideanDivision"),(0,i.kt)("p",null,"Performs the euclidean division returns the whole result of type ",(0,i.kt)("inlineCode",{parentName:"p"},"TOption(TPair(TNat(), TNat()))"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#EuclideanDivision"},"TypeDoc"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const {\n    Contract,\n    EntryPoint,\n    SetValue,\n    ContractStorage,\n    EuclideanDivision,\n    Nat,\n    TOption,\n    TPair,\n    TNat,\n} = require('@tezwell/smartts-sdk');\n\nconst contract = new Contract()\n    .setStorageType(TOption(TPair(TNat(), TNat())))\n    .addEntrypoint(\n        new EntryPoint('ep1').code(() => [\n            SetValue(ContractStorage(), EuclideanDivision(Nat(13), Nat(3)))\n        ]),\n    );\n")),(0,i.kt)("h2",{id:"logical-left-shift"},"Logical left shift"),(0,i.kt)("p",null,"The logically left shift produces the first number logically left-shifted by second number."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#ShiftLeft"},"TypeDoc"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const {\n    Contract,\n    EntryPoint,\n    SetValue,\n    ContractStorage,\n    ShiftLeft,\n    Nat,\n    TNat,\n} = require('@tezwell/smartts-sdk');\n\nconst contract = new Contract()\n    .setStorageType(TNat())\n    .addEntrypoint(\n        new EntryPoint('ep1').code(() => [\n            SetValue(ContractStorage(), ShiftLeft(Nat(2), Nat(1)))\n        ]),\n    );\n")),(0,i.kt)("h2",{id:"logical-right-shift"},"Logical right shift"),(0,i.kt)("p",null,"The logically right shift produces the first number logically right-shifted by second number."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://romarq.github.io/smartts-sdk/api/modules/expression.html#ShiftRight"},"TypeDoc"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const {\n    Contract,\n    EntryPoint,\n    SetValue,\n    ContractStorage,\n    ShiftRight,\n    Nat,\n    TNat,\n} = require('@tezwell/smartts-sdk');\n\nconst contract = new Contract()\n    .setStorageType(TNat())\n    .addEntrypoint(\n        new EntryPoint('ep1').code(() => [\n            SetValue(ContractStorage(), ShiftRight(Nat(2), Nat(1)))\n        ]),\n    );\n")))}d.isMDXComponent=!0}}]);